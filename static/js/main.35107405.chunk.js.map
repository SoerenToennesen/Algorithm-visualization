{"version":3,"sources":["SearchAlgorithms/components/helperfunctions.tsx","SearchAlgorithms/BFS.tsx","SearchAlgorithms/DFS.tsx","SearchAlgorithms/GBFS.tsx","SearchAlgorithms/AStar.tsx","index.tsx"],"names":["alreadyDiscovered","discovered","nodeToCheck","i","length","toString","getFullDataSearch","fullSearchData","goal","pathTemp","pathFound","findNext","push","j","Number","MIN_SAFE_INTEGER","BFS","graph","currentNodes","targetNode","found","walls","view","directions","nextNodes","depth","add","k","DFS","chosenDirection","GBFS","bestDirection","MAX_SAFE_INTEGER","h","Math","abs","AStar","f","legend","dropdownPicked","startSelected","goalSelected","colorOfRange","goalColor","algoSelectedOption","className","footer","start","pickTargets","hoverBox","style","position","height","width","marginTop","marginLeft","top","left","backgroundColor","borderRadius","display","zIndex","drawStartAndGoal","startOrGoal","isGoal","animation","drawSearch","positions","isFade","map","entry","elem","drawPath","drawWalls","drawWeights","weights","App","useState","phase","setPhase","setDropdownPicked","setStartSelected","setGoalSelected","setHoverBox","setStart","setGoal","setFullSearchData","setPositions","positionsPath","setPositionsPath","alreadyDrawn","setAlreadyDrawn","alreadyDrawnPath","setAlreadyDrawnPath","path","setPath","setPathFound","drawn","setDrawn","setColorOfRange","setGoalColor","drawingDone","setDrawingDone","setWalls","setWeights","algoSelected","setAlgoSelected","setAlgoSelectedOption","click","setClick","dropdownAlgorithms","setDropdownAlgorithms","dropdownDatastructures","setDropdownDatastructures","clickAlgo","clickDatastruct","algoOrDatastruct","setAlgoOrDatastruct","onmousedown","e","onmouseup","onmousemove","clientY","floor","clientX","e2","walls_temp","weights_temp","range","maxWidth","max","document","documentElement","clientWidth","window","innerWidth","minHeight","maxHeight","clientHeight","innerHeight","fullDataSearchTemp","reverse","partialReset","useEffect","interval","setInterval","clearInterval","alreadyDrawnTempPath","l","posPath","alreadyDrawnTemp","pos","onClick","onMouseEnter","onMouseLeave","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.35107405.chunk.js","sourcesContent":["\r\n\r\n\r\nexport function alreadyDiscovered(discovered: number[][], nodeToCheck: number[]): boolean {\r\n    for (var i = 0; i < discovered.length; i++) {\r\n        if (discovered[i].toString() === nodeToCheck.toString()) return true;\r\n    }\r\n    return false;\r\n}\r\n\r\nexport function getFullDataSearch(fullSearchData: number[][][], goal: number[]) : number[][] {\r\n    var pathTemp: number[][] = [];\r\n    var pathFound: boolean = false;\r\n    var findNext = goal;\r\n    for (var i = fullSearchData.length - 1; i >= 0; i--) {\r\n        if (i === fullSearchData.length - 1) pathTemp.push(goal);\r\n        if (pathFound) break;\r\n        for (var j = 0; j < fullSearchData[i].length; j++) {\r\n          if (fullSearchData[i][j][0] === findNext[0] && fullSearchData[i][j][1] === findNext[1]) {\r\n            if (fullSearchData[i][j][2] === Number.MIN_SAFE_INTEGER) {\r\n              pathFound = true;\r\n              break;\r\n            }\r\n            pathTemp.push([fullSearchData[i][j][2], fullSearchData[i][j][3]])\r\n            findNext = [fullSearchData[i][j][2], fullSearchData[i][j][3]];\r\n            break;\r\n          }\r\n        }\r\n    }\r\n    return pathTemp;\r\n}","import {alreadyDiscovered} from './components/helperfunctions';\r\n\r\n//BFS building the lookup matrix\r\n//currentNodes stores both the current node and it's parent node (first 2 index = current, last 2 index = parent)\r\nexport function BFS(graph: number[][][], currentNodes: number[][], targetNode: number[],\r\n            discovered: number[][], found: boolean, walls: number[][], view: number[]): number[][][] {\r\n    if (found) return graph;\r\n    const directions: number[][] = [[1,0],[0,1],[-1,0],[0,-1]];\r\n    var nextNodes: number[][] = [];\r\n    graph.push([[]]);\r\n    var depth = graph.length - 1;\r\n    for (var i = 0; i < currentNodes.length; i++) {\r\n        if (alreadyDiscovered(discovered, [currentNodes[i][0], currentNodes[i][1]])) continue;\r\n        if (i === 0) graph[depth][0] = currentNodes[i];\r\n        else graph[depth].push(currentNodes[i]);\r\n        discovered.push([currentNodes[i][0], currentNodes[i][1]]);\r\n        for (var j = 0; j < directions.length; j++) {\r\n            if ((alreadyDiscovered(discovered, [currentNodes[i][0] + directions[j][0], currentNodes[i][1] + directions[j][1]])) ||\r\n                ((currentNodes[i][0] + directions[j][0] <= view[0] || currentNodes[i][0] + directions[j][0] >= view[1]) || \r\n                (currentNodes[i][1] + directions[j][1] <= view[2] || currentNodes[i][1] + directions[j][1] >= view[3]))) { // out of bounds, think of it as walls\r\n                continue;\r\n            }\r\n            var add: boolean = true;\r\n            for (var k = 0; k < walls.length; k++) {\r\n                if ([currentNodes[i][0] + directions[j][0], currentNodes[i][1] + directions[j][1]].toString() === walls[k].toString()) {\r\n                    add = false;\r\n                    break;\r\n                }\r\n            }\r\n            if (add) {\r\n                nextNodes.push([currentNodes[i][0] + directions[j][0], currentNodes[i][1] + directions[j][1], currentNodes[i][0], currentNodes[i][1]]);\r\n            }\r\n        }\r\n        if (!found && (currentNodes[i][0] === targetNode[0] && currentNodes[i][1] === targetNode[1])) found = true;\r\n    }\r\n    return BFS(graph, nextNodes, targetNode, discovered, found, walls, view);\r\n}\r\n","import {alreadyDiscovered} from './components/helperfunctions';\r\n\r\nexport function DFS(graph: number[][][], currentNodes: number[][], targetNode: number[],\r\n            discovered: number[][], found: boolean, walls: number[][], view: number[]): number[][][] {\r\n    if (found) return graph;\r\n    const directions: number[][] = [[1,0],[0,1],[-1,0],[0,-1]];\r\n    var nextNodes: number[][] = [];\r\n    graph.push([[]]);\r\n    var depth = graph.length - 1;\r\n    /*if (depth > 5000) { // currently a safety measure to not search too deep\r\n        return graph;\r\n    }*/\r\n    for (var i = 0; i < currentNodes.length; i++) {\r\n        if (alreadyDiscovered(discovered, [currentNodes[i][0], currentNodes[i][1]])) continue;\r\n        if (i === 0) graph[depth][0] = currentNodes[i];\r\n        else graph[depth].push(currentNodes[i]);\r\n        discovered.push([currentNodes[i][0], currentNodes[i][1]]);\r\n        var chosenDirection: number = -1;\r\n        for (var j = 0; j < directions.length; j++) {\r\n            if ((alreadyDiscovered(discovered, [currentNodes[i][0] + directions[j][0], currentNodes[i][1] + directions[j][1]])) ||\r\n                ((currentNodes[i][0] + directions[j][0] <= view[0] || currentNodes[i][0] + directions[j][0] >= view[1]) || \r\n                (currentNodes[i][1] + directions[j][1] <= view[2] || currentNodes[i][1] + directions[j][1] >= view[3]))) { // out of bounds, think of it as walls\r\n                continue;\r\n            } else {\r\n                var add: boolean = true;\r\n                for (var k = 0; k < walls.length; k++) {\r\n                    if ([currentNodes[i][0] + directions[j][0], currentNodes[i][1] + directions[j][1]].toString() === walls[k].toString()) {\r\n                        add = false;\r\n                        break;\r\n                    }\r\n                }\r\n                if (!add) continue;\r\n                chosenDirection = j;\r\n                break;\r\n            }\r\n        }\r\n        if (chosenDirection === -1) {\r\n            //depth is exhausted, try a different depth. Current just return this as a dead end\r\n            return graph;\r\n        }\r\n        nextNodes.push([currentNodes[i][0] + directions[chosenDirection][0], currentNodes[i][1] + directions[chosenDirection][1], currentNodes[i][0], currentNodes[i][1]]);\r\n        if (!found && (currentNodes[i][0] === targetNode[0] && currentNodes[i][1] === targetNode[1])) found = true;\r\n    }\r\n    return DFS(graph, nextNodes, targetNode, discovered, found, walls, view);\r\n}\r\n","import {alreadyDiscovered} from './components/helperfunctions';\r\n\r\nexport function GBFS(graph: number[][][], currentNodes: number[][], targetNode: number[],\r\n            discovered: number[][], found: boolean, walls: number[][], view: number[]): number[][][] {\r\n    if (found) return graph;\r\n    const directions: number[][] = [[1,0],[0,1],[-1,0],[0,-1]];\r\n    var nextNodes: number[][] = [];\r\n    graph.push([[]]);\r\n    var depth = graph.length - 1;\r\n    for (var i = 0; i < currentNodes.length; i++) {\r\n        if (alreadyDiscovered(discovered, [currentNodes[i][0], currentNodes[i][1]])) continue;\r\n        if (i === 0) graph[depth][0] = currentNodes[i];\r\n        else graph[depth].push(currentNodes[i]);\r\n        discovered.push([currentNodes[i][0], currentNodes[i][1]]);\r\n        var bestDirection: number[] = [Number.MAX_SAFE_INTEGER, -1];\r\n        for (var j = 0; j < directions.length; j++) {\r\n            if ((alreadyDiscovered(discovered, [currentNodes[i][0] + directions[j][0], currentNodes[i][1] + directions[j][1]])) ||\r\n                ((currentNodes[i][0] + directions[j][0] <= view[0] || currentNodes[i][0] + directions[j][0] >= view[1]) || \r\n                (currentNodes[i][1] + directions[j][1] <= view[2] || currentNodes[i][1] + directions[j][1] >= view[3]))) { // out of bounds, think of it as walls\r\n                continue;\r\n            }\r\n            var add: boolean = true;\r\n            for (var k = 0; k < walls.length; k++) {\r\n                if ([currentNodes[i][0] + directions[j][0], currentNodes[i][1] + directions[j][1]].toString() === walls[k].toString()) {\r\n                    add = false;\r\n                    break;\r\n                }\r\n            }\r\n            if (!add) continue;\r\n            var h: number = Math.abs(currentNodes[i][0] + directions[j][0] - targetNode[0]) + \r\n                            Math.abs(currentNodes[i][1] + directions[j][1] - targetNode[1]);\r\n            if (h < bestDirection[0]) bestDirection = [h, j];\r\n        }\r\n        nextNodes.push([currentNodes[i][0] + directions[bestDirection[1]][0], currentNodes[i][1] + directions[bestDirection[1]][1], currentNodes[i][0], currentNodes[i][1]]);\r\n        if (!found && (currentNodes[i][0] === targetNode[0] && currentNodes[i][1] === targetNode[1])) found = true;\r\n    }\r\n    return GBFS(graph, nextNodes, targetNode, discovered, found, walls, view);\r\n}\r\n","import {alreadyDiscovered} from './components/helperfunctions';\r\n\r\nexport function AStar(graph: number[][][], currentNodes: number[][], targetNode: number[],\r\n            discovered: number[][], found: boolean, walls: number[][], view: number[]): number[][][] {\r\n    if (found) return graph;\r\n    const directions: number[][] = [[1,0],[0,1],[-1,0],[0,-1]];\r\n    var nextNodes: number[][] = [];\r\n    graph.push([[]]);\r\n    var depth = graph.length - 1;\r\n    for (var i = 0; i < currentNodes.length; i++) {\r\n        if (alreadyDiscovered(discovered, [currentNodes[i][0], currentNodes[i][1]])) continue;\r\n        if (i === 0) graph[depth][0] = currentNodes[i];\r\n        else graph[depth].push(currentNodes[i]);\r\n        discovered.push([currentNodes[i][0], currentNodes[i][1]]);\r\n        var bestDirection: number[] = [Number.MAX_SAFE_INTEGER, -1];\r\n        for (var j = 0; j < directions.length; j++) {\r\n            if ((alreadyDiscovered(discovered, [currentNodes[i][0] + directions[j][0], currentNodes[i][1] + directions[j][1]])) ||\r\n                ((currentNodes[i][0] + directions[j][0] <= view[0] || currentNodes[i][0] + directions[j][0] >= view[1]) || \r\n                (currentNodes[i][1] + directions[j][1] <= view[2] || currentNodes[i][1] + directions[j][1] >= view[3]))) { // out of bounds, think of it as walls\r\n                continue;\r\n            }\r\n            var add: boolean = true;\r\n            for (var k = 0; k < walls.length; k++) {\r\n                if ([currentNodes[i][0] + directions[j][0], currentNodes[i][1] + directions[j][1]].toString() === walls[k].toString()) {\r\n                    add = false;\r\n                    break;\r\n                }\r\n            }\r\n            if (!add) continue;\r\n            var g: number = depth + 1;\r\n            var h: number = Math.abs(currentNodes[i][0] + directions[j][0] - targetNode[0]) + \r\n                            Math.abs(currentNodes[i][1] + directions[j][1] - targetNode[1]);\r\n            var f: number = g + h;\r\n            if (f < bestDirection[0]) bestDirection = [f, j];\r\n        }\r\n        nextNodes.push([currentNodes[i][0] + directions[bestDirection[1]][0], currentNodes[i][1] + directions[bestDirection[1]][1], currentNodes[i][0], currentNodes[i][1]]);\r\n        if (!found && (currentNodes[i][0] === targetNode[0] && currentNodes[i][1] === targetNode[1])) found = true;\r\n    }\r\n    return AStar(graph, nextNodes, targetNode, discovered, found, walls, view);\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport 'font-awesome/css/font-awesome.min.css';\r\n\r\nimport {BFS} from './SearchAlgorithms/BFS';\r\nimport {DFS} from './SearchAlgorithms/DFS';\r\nimport {GBFS} from './SearchAlgorithms/GBFS';\r\nimport {AStar} from './SearchAlgorithms/AStar';\r\nimport {getFullDataSearch} from './SearchAlgorithms/components/helperfunctions';\r\n\r\n\r\n\r\nfunction legend(dropdownPicked: boolean, startSelected: boolean, goalSelected: boolean, colorOfRange: number, goalColor: number, algoSelectedOption: string) {\r\n  return (\r\n      <div className=\"legend-container\">\r\n        <div className=\"legend-title\">\r\n          Legend\r\n        </div>\r\n        {dropdownPicked && algoSelectedOption === \"Add walls\" ? \r\n        <div className=\"legend-info\">\r\n          <div className=\"legend-colorm1\"><i className='fas fa-square'/></div>\r\n            &nbsp;Add walls\r\n        </div>\r\n        : null}\r\n        {dropdownPicked && algoSelectedOption === \"Add weights\" ? \r\n        <div className=\"legend-info\">\r\n          <div className=\"legend-color0\"><i className='fas fa-square'/></div>\r\n            &nbsp;Add weights\r\n        </div>\r\n        : null}\r\n        {dropdownPicked && algoSelectedOption === \"Select nodes\" && !startSelected ? \r\n        <div className=\"legend-info\">\r\n          <div className=\"legend-color1\"><i className='fas fa-square'/></div>\r\n            &nbsp;Select start node\r\n        </div>\r\n        : null}\r\n        {startSelected ? \r\n        <div className=\"legend-info\">\r\n          <div className=\"legend-color1\"><i className='fas fa-square'/></div>\r\n            &nbsp;Start node\r\n        </div>\r\n        : null}\r\n        {startSelected && algoSelectedOption === \"Select nodes\" && !goalSelected ? \r\n        (colorOfRange === 0 ? \r\n        <div className=\"legend-info\">\r\n          <div className=\"legend-color2\"><i className='fas fa-square'/></div>\r\n            &nbsp;Select goal node (green light)\r\n        </div> \r\n        : (colorOfRange === 1 ? \r\n        <div className=\"legend-info\">\r\n          <div className=\"legend-color3\"><i className='fas fa-square'/></div>\r\n            &nbsp;Select goal node (computationally hard)\r\n        </div> \r\n        : \r\n        <div className=\"legend-info\">\r\n          <div className=\"legend-color4\"><i className='fas fa-square'/></div>\r\n            &nbsp;Select goal node (restricted)\r\n        </div>))\r\n        : null}\r\n        {goalSelected ? \r\n        <div className=\"legend-info\">\r\n          <div className={goalColor === 0 ? \"legend-color2\" : (goalColor === 1 ? \"legend-color3\" : \"legend-color4\")}><i className='fas fa-square'/></div>\r\n            &nbsp;Goal node\r\n        </div>\r\n        : null}\r\n        {goalSelected ? \r\n        <div className=\"legend-info\">\r\n          <div className=\"legend-color5\"><i className='fas fa-square'/></div>\r\n            &nbsp;Search\r\n        </div>\r\n        : null}\r\n        {goalSelected ? \r\n        <div className=\"legend-info\">\r\n          <div className=\"legend-color6\"><i className='fas fa-square'/></div>\r\n            &nbsp;Path found\r\n        </div>\r\n        : null}\r\n      </div>\r\n  )\r\n}\r\n\r\nfunction todo() {\r\n  return (\r\n      <div className=\"todo-container\">\r\n        <div className=\"todo-title\">\r\n          Todo list\r\n        </div>\r\n        <div className=\"todo-info\">\r\n          <i className='fas fa-check'/>\r\n            &nbsp;Implement swarm algorithm\r\n        </div>\r\n        <div className=\"todo-info\">\r\n          <i className='fas fa-check'/>\r\n            &nbsp;Implement data structures\r\n        </div>\r\n      </div>\r\n  )\r\n}\r\n\r\nfunction footer(dropdownPicked: boolean, startSelected: boolean, goalSelected: boolean, start: number[], goal: number[]) {\r\n  return (\r\n      <footer className=\"footer-container\">\r\n        {!dropdownPicked ?\r\n        <div className=\"footer-info\">\r\n          Select an algorithm or datastructure\r\n        </div> : null}\r\n        {!startSelected && dropdownPicked?\r\n        <div className=\"footer-info\">\r\n          Select your start node\r\n        </div> : null}\r\n        {startSelected && !goalSelected ?\r\n        <div className=\"footer-info\">\r\n          Select your goal node\r\n        </div> : null}\r\n        {startSelected && goalSelected ?\r\n        <div className=\"footer-inf-nowiggle\">\r\n          Enjoy the show!\r\n        </div> : null}\r\n      </footer>\r\n  )\r\n}\r\n\r\n\r\nfunction pickTargets(hoverBox: number[], startSelected: boolean, colorOfRange: number, algoSelectedOption: string) {\r\n  return (\r\n    <div\r\n      style={{\r\n        position: \"absolute\",\r\n        height: \"15px\",\r\n        width: \"15px\",\r\n        marginTop: `${hoverBox[0]}px`,\r\n        marginLeft: `${hoverBox[1]}px`,\r\n        top: \"3px\",\r\n        left: \"3px\",\r\n        backgroundColor: algoSelectedOption === \"Select nodes\" ? (startSelected ? (colorOfRange === 0 ? \"rgb(49, 158, 63, 0.5)\" : ( colorOfRange === 1 ? \"rgb(211, 221, 63, 0.5)\" : \"rgb(221, 63, 63, 0.5)\" ) ) : \"rgb(65,126,238, 0.5)\") : (algoSelectedOption === \"Add walls\" ? \"rgb(146, 95, 0, 0.5)\" : \"rgb(68, 0, 179, 0.5)\"),\r\n        borderRadius: \"35%\",\r\n        display: \"inline-block\",\r\n        zIndex: -1,\r\n      }}\r\n    />\r\n  )\r\n}\r\n\r\nfunction drawStartAndGoal(startOrGoal: number[], isGoal: boolean, colorOfRange: number) {\r\n  return (\r\n        <div style={{\r\n          position: \"absolute\",\r\n          height: \"15px\",\r\n          width: \"15px\",\r\n          marginLeft: `${startOrGoal[0] * 20}px`,\r\n          marginTop: `${startOrGoal[1] * 20}px`,\r\n          top: \"3px\",\r\n          left: \"3px\",\r\n          backgroundColor: isGoal ? (colorOfRange === 0 ? \"rgb(49, 158, 63)\" : ( colorOfRange === 1 ? \"rgb(211, 221, 63)\" : \"rgb(221, 63, 63)\" ) ) : \"rgb(65,126,238)\",\r\n          borderRadius: \"35%\",\r\n          display: \"inline-block\",\r\n          animation: \"fadeMe .2s\",\r\n          zIndex: -0.9,\r\n        }}/>\r\n  );\r\n}\r\n\r\nfunction drawSearch(positions: number[][][], isFade: boolean) {\r\n  return (\r\n    positions.map(entry => (\r\n      entry.map(elem => (\r\n        <div style={{\r\n          position: \"absolute\",\r\n          height: \"15px\",\r\n          width: \"15px\",\r\n          marginLeft: `${elem[0] * 20}px`,\r\n          marginTop: `${elem[1] * 20}px`,\r\n          top: \"3px\",\r\n          left: \"3px\",\r\n          backgroundColor: \"rgb(90, 90, 90)\",\r\n          borderRadius: \"35%\",\r\n          display: \"inline-block\",\r\n          animation: isFade ? \"fadeMe .2s\" : \"\",\r\n          zIndex: -1,\r\n        }}/>\r\n      ))\r\n    ))\r\n  );\r\n}\r\n\r\nfunction drawPath(positions: number[][], isFade: boolean) {\r\n  return (\r\n    positions.map(entry => (\r\n      <div style={{\r\n        position: \"absolute\",\r\n        height: \"7.5px\",\r\n        width: \"7.5px\",\r\n        marginLeft: `${entry[0] * 20}px`,\r\n        marginTop: `${entry[1] * 20}px`,\r\n        top: \"6.85px\",\r\n        left: \"6.85px\",\r\n        backgroundColor: \"rgb(240,149,55)\",\r\n        borderRadius: \"35%\",\r\n        display: \"inline-block\",\r\n        animation: isFade ? \"fadeMe .2s\" : \"\",\r\n        zIndex: -0.8,\r\n      }}/>\r\n    ))\r\n  );\r\n}\r\n\r\nfunction drawWalls(walls: number[][], isFade: boolean) {\r\n  return (\r\n    walls.map(entry => (\r\n      <div style={{\r\n        position: \"absolute\",\r\n        height: \"20px\",\r\n        width: \"20px\",\r\n        marginLeft: `${entry[0] * 20}px`,\r\n        marginTop: `${entry[1] * 20}px`,\r\n        top: \"0px\",\r\n        left: \"0px\",\r\n        backgroundColor: \"rgb(146, 95, 0)\",\r\n        display: \"inline-block\",\r\n        animation: isFade ? \"fadeMe 1s\" : \"\",\r\n        zIndex: -0.8,\r\n      }}/>\r\n    ))\r\n  );\r\n}\r\n\r\nfunction drawWeights(weights: number[][], isFade: boolean) {\r\n  return (\r\n    weights.map(entry => (\r\n      <div style={{\r\n        position: \"absolute\",\r\n        height: \"20px\",\r\n        width: \"20px\",\r\n        marginLeft: `${entry[0] * 20}px`,\r\n        marginTop: `${entry[1] * 20}px`,\r\n        top: \"0px\",\r\n        left: \"0px\",\r\n        backgroundColor: `rgb(68, 0, 179, ${entry[2]})`,\r\n        display: \"inline-block\",\r\n        animation: isFade ? \"fadeMe 1s\" : \"\",\r\n        zIndex: -0.8,\r\n      }}/>\r\n    ))\r\n  );\r\n}\r\n\r\n\r\nfunction App() {\r\n\r\n  const [phase, setPhase] = useState(-1);\r\n  const [dropdownPicked, setDropdownPicked] = useState(false);\r\n  const [startSelected, setStartSelected] = useState(false);\r\n  const [goalSelected, setGoalSelected] = useState(false);\r\n  const [hoverBox, setHoverBox] = useState<number[]>([]);\r\n  const [start, setStart] = useState<number []>([]);\r\n  const [goal, setGoal] = useState<number []>([]);\r\n  const [fullSearchData, setFullSearchData] = useState<number[][][]>([]);\r\n  const [positions, setPositions] = useState<number[][][]>([]);\r\n  const [positionsPath, setPositionsPath] = useState<number[][]>([]);\r\n  const [alreadyDrawn, setAlreadyDrawn] = useState<number[][][]>([]);\r\n  const [alreadyDrawnPath, setAlreadyDrawnPath] = useState<number[][]>([]);\r\n  const [path, setPath] = useState<number[][]>([]);\r\n  const [pathFound, setPathFound] = useState(false);\r\n  const [drawn, setDrawn] = useState(false);\r\n  const [colorOfRange, setColorOfRange] = useState(0);\r\n  const [goalColor, setGoalColor] = useState(0);\r\n  const [drawingDone, setDrawingDone] = useState(true);\r\n  const [walls, setWalls] = useState<number[][]>([]);\r\n  const [weights, setWeights] = useState<number[][]>([]);\r\n  const [algoSelected, setAlgoSelected] = useState(false);\r\n  const [algoSelectedOption, setAlgoSelectedOption] = useState(\"Select nodes\");\r\n\r\n\r\n  const [click, setClick] = useState(false);\r\n  const [dropdownAlgorithms, setDropdownAlgorithms] = useState(false);\r\n  const [dropdownDatastructures, setDropdownDatastructures] = useState(false);\r\n  const handleClick = () => setClick(!click);\r\n  const [clickAlgo, setClickAlgo] = useState(false);\r\n  const [clickDatastruct, setClickDatastruct] = useState(false);\r\n  const [algoOrDatastruct, setAlgoOrDatastruct] = useState<string>(\"Nothing selected\");\r\n\r\n  const onMouseEnterDropdownAlgorithms = () => {\r\n      if (window.innerWidth < 960) {\r\n          setDropdownAlgorithms(false);\r\n      } else {\r\n          setDropdownAlgorithms(true);\r\n      }\r\n  };\r\n  const onMouseLeaveDropdownAlgorithms = () => {\r\n      if (window.innerWidth < 960) {\r\n          setDropdownAlgorithms(false);\r\n      } else {\r\n          setDropdownAlgorithms(false);\r\n      }\r\n  };\r\n  const onMouseEnterDropdownDatastructures = () => {\r\n      if (window.innerWidth < 960) {\r\n          setDropdownDatastructures(false);\r\n      } else {\r\n          setDropdownDatastructures(true);\r\n      }\r\n  };\r\n  const onMouseLeaveDropdownDatastructures = () => {\r\n      if (window.innerWidth < 960) {\r\n          setDropdownDatastructures(false);\r\n      } else {\r\n          setDropdownDatastructures(false);\r\n      }\r\n  };\r\n\r\n\r\n  if (algoSelectedOption === \"Add walls\") {\r\n    onmousedown = function(e) {}\r\n    onmouseup = function(e) {}\r\n    onmousemove = function(e) {}\r\n\r\n    onmousemove = function(e) {\r\n      if (e.clientY >= 80) {\r\n        setHoverBox([Math.floor(e.clientY / 20) * 20, Math.floor(e.clientX / 20) * 20])\r\n        onmousedown = function(e2) {\r\n          if (e2.clientY >= 80) {\r\n            var add: boolean = true;\r\n            var walls_temp = walls;\r\n            for (var i = 0; i < walls_temp.length; i++) {\r\n              if (walls_temp[i].toString() === [Math.floor(e.clientX / 20), Math.floor(e.clientY / 20)].toString()) {\r\n                add = false;\r\n                break;\r\n              }\r\n            }\r\n            if (add) {\r\n              var weights_temp: number[][] = [];\r\n              for (var i = 0; i < weights.length; i++) {\r\n                if ([weights[i][0], weights[i][1]].toString() !== [Math.floor(e.clientX / 20), Math.floor(e.clientY / 20)].toString()) {\r\n                  weights_temp.push(weights[i]);\r\n                }\r\n              }\r\n              setWeights(weights_temp);\r\n            }\r\n            if (add) {\r\n              walls_temp.push([Math.floor(e.clientX / 20), Math.floor(e.clientY / 20)]);\r\n              setWalls(walls_temp);\r\n            }\r\n          }\r\n        }\r\n      };\r\n    }\r\n  }\r\n\r\n  if (algoSelectedOption === \"Add weights\") {\r\n    onmousedown = function(e) {}\r\n    onmouseup = function(e) {}\r\n    onmousemove = function(e) {}\r\n\r\n    onmousemove = function(e) {\r\n      if (e.clientY >= 80) {\r\n        setHoverBox([Math.floor(e.clientY / 20) * 20, Math.floor(e.clientX / 20) * 20])\r\n        onmousedown = function(e2) {\r\n          if (e2.clientY >= 80) {\r\n            var add: boolean = true;\r\n            var weights_temp = weights;\r\n            for (var i = 0; i < weights_temp.length; i++) {\r\n              if ([weights[i][0], weights[i][1]].toString() === [Math.floor(e.clientX / 20), Math.floor(e.clientY / 20)].toString()) {\r\n                add = false;\r\n                weights_temp[i][2] = weights_temp[i][2] === 1 ? 0.2 : weights_temp[i][2] + 0.2;\r\n                break;\r\n              }\r\n            }\r\n            if (add) {\r\n              for (var i = 0; i < walls.length; i++) {\r\n                if (walls[i].toString() === [Math.floor(e.clientX / 20), Math.floor(e.clientY / 20)].toString()) {\r\n                  add = false;\r\n                  break;\r\n                }\r\n              }\r\n            }\r\n            if (add) {\r\n              weights_temp.push([Math.floor(e.clientX / 20), Math.floor(e.clientY / 20), 0.2]);\r\n              setWeights(weights_temp);\r\n            }\r\n          }\r\n        }\r\n      };\r\n    }\r\n  }\r\n\r\n  //The mouse event listeners are actually still running, causing a lot of rerenders... Figure out a way to turn this off\r\n  if (dropdownPicked && algoSelectedOption === \"Select nodes\") {\r\n    if (!startSelected || !goalSelected) {\r\n      onmousedown = function(e) {}\r\n      onmouseup = function(e) {}\r\n      onmousemove = function(e) {}\r\n      onmouseup = function(e) {\r\n        if (algoSelectedOption !== \"Select nodes\") return;\r\n        if (!startSelected && start.length === 0) {\r\n          if (e.clientY >= 80) {\r\n            setStart([Math.floor(e.clientX / 20), Math.floor(e.clientY / 20)])\r\n            setStartSelected(true);\r\n          }\r\n        }\r\n        else if (!goalSelected && goal.length === 0) {\r\n          if (e.clientY >= 80) {\r\n            if (colorOfRange !== 2) {\r\n              var goalColorTemp = colorOfRange;\r\n              setGoalColor(goalColorTemp);\r\n              setGoal([Math.floor(e.clientX / 20), Math.floor(e.clientY / 20)])\r\n              setGoalSelected(true);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  \r\n\r\n  if (!goalSelected && dropdownPicked && algoSelectedOption === \"Select nodes\") {\r\n    onmousemove = function(e) {\r\n      var range: number = Math.abs(Math.floor(e.clientX / 20) - start[0]) + \r\n                          Math.abs(Math.floor(e.clientY / 20) - start[1]);\r\n      if (e.clientY >= 80) {\r\n        if (algoOrDatastruct === \"BFS algorithm selected\") {\r\n          if (range < 10) setColorOfRange(0);\r\n          if (range >= 10 && range < 18) setColorOfRange(1);\r\n          if (range >= 18) setColorOfRange(2);\r\n        } else if (algoOrDatastruct === \"DFS algorithm selected\") {\r\n          setColorOfRange(0);\r\n        } else if (algoOrDatastruct === \"GBFS algorithm selected\") {\r\n          setColorOfRange(0);\r\n        } else if (algoOrDatastruct === \"A* algorithm selected\") {\r\n          setColorOfRange(0);\r\n        }\r\n        \r\n        setHoverBox([Math.floor(e.clientY / 20) * 20, Math.floor(e.clientX / 20) * 20]);\r\n      };\r\n    }\r\n  }\r\n  \r\n  if (!dropdownPicked) {\r\n    if (phase !== 0) {\r\n      setPhase(0);\r\n    }\r\n  } else if (!goalSelected && dropdownPicked) {\r\n    if (phase !== 1) {\r\n      setPhase(1);\r\n    }\r\n  } else if (goalSelected && !pathFound) {\r\n    onmousedown = function(e) {}\r\n    onmouseup = function(e) {}\r\n    onmousemove = function(e) {}\r\n    if (phase !== 2) {\r\n      if (fullSearchData.length === 0 || path.length === 0) {\r\n        const minWidth: number = -1;\r\n        const maxWidth: number = Math.floor((Math.max(document.documentElement.clientWidth || 0, window.innerWidth || 0) - 19.99) / 20) + 1;\r\n        const minHeight: number = Math.floor(80 / 20) - 1;\r\n        const maxHeight: number = Math.floor((Math.max(document.documentElement.clientHeight || 0, window.innerHeight || 0) - 19.99) / 20) + 1;\r\n        if (algoOrDatastruct === \"BFS algorithm selected\") {\r\n          var fullDataSearchTemp: number[][][] = BFS([], [[start[0], start[1], Number.MIN_SAFE_INTEGER, Number.MIN_SAFE_INTEGER]], goal, [], false, walls, [minWidth, maxWidth, minHeight, maxHeight]);\r\n          setFullSearchData(fullDataSearchTemp);\r\n          var pathTemp: number[][] = getFullDataSearch(fullDataSearchTemp, goal);\r\n          pathTemp = pathTemp.reverse();\r\n          setPath(pathTemp);\r\n          setPathFound(true);\r\n          setPhase(3);\r\n        } else if (algoOrDatastruct === \"DFS algorithm selected\") {\r\n          var fullDataSearchTemp: number[][][] = DFS([], [[start[0], start[1], Number.MIN_SAFE_INTEGER, Number.MIN_SAFE_INTEGER]], goal, [], false, walls, [minWidth, maxWidth, minHeight, maxHeight]);\r\n          setFullSearchData(fullDataSearchTemp);\r\n          var pathTemp: number[][] = getFullDataSearch(fullDataSearchTemp, goal);\r\n          pathTemp = pathTemp.reverse();\r\n          setPath(pathTemp);\r\n          setPathFound(true);\r\n          setPhase(3);\r\n        } else if (algoOrDatastruct === \"GBFS algorithm selected\") {\r\n          var fullDataSearchTemp: number[][][] = GBFS([], [[start[0], start[1], Number.MIN_SAFE_INTEGER, Number.MIN_SAFE_INTEGER]], goal, [], false, walls, [minWidth, maxWidth, minHeight, maxHeight]);\r\n          setFullSearchData(fullDataSearchTemp);\r\n          var pathTemp: number[][] = getFullDataSearch(fullDataSearchTemp, goal);\r\n          pathTemp = pathTemp.reverse();\r\n          setPath(pathTemp);\r\n          setPathFound(true);\r\n          setPhase(3);\r\n        } else if (algoOrDatastruct === \"A* algorithm selected\") {\r\n          var fullDataSearchTemp: number[][][] = AStar([], [[start[0], start[1], Number.MIN_SAFE_INTEGER, Number.MIN_SAFE_INTEGER]], goal, [], false, walls, [minWidth, maxWidth, minHeight, maxHeight]);\r\n          setFullSearchData(fullDataSearchTemp);\r\n          var pathTemp: number[][] = getFullDataSearch(fullDataSearchTemp, goal);\r\n          pathTemp = pathTemp.reverse();\r\n          setPath(pathTemp);\r\n          setPathFound(true);\r\n          setPhase(3);\r\n        }\r\n      }\r\n      setPhase(2);\r\n    }\r\n  } else if (pathFound && !drawn) {\r\n    if (phase !== 3) {\r\n      setPhase(3);\r\n    }\r\n  } else if (drawn) {\r\n    if (phase !== 4) {\r\n      //reset to normal\r\n      setPhase(4);\r\n    }\r\n  } else {\r\n    if (phase !== 0) {\r\n      setPhase(0);\r\n    }\r\n  }\r\n\r\n  var i = 0;\r\n  var k = 0;\r\n  useEffect(() => {\r\n    if (pathFound) {\r\n      setDrawingDone(false);\r\n      const interval = setInterval(() => {\r\n        if (i === fullSearchData.length) {\r\n          if (k === path.length) {\r\n            setDrawingDone(true);\r\n            clearInterval(interval);\r\n            return;\r\n          } else {\r\n            if (k > 0) {\r\n              var alreadyDrawnTempPath: number[][] = [];\r\n              for (var l = 0; l < k; l++) {\r\n                alreadyDrawnTempPath[l] = path[l]\r\n              }\r\n              setAlreadyDrawnPath(alreadyDrawnTempPath);\r\n            }\r\n            var posPath: number[][] = [];\r\n            posPath[k] = path[k];\r\n            setPositionsPath(posPath);\r\n            k++;\r\n          }\r\n        } else {\r\n          if (i > 0) {\r\n            var alreadyDrawnTemp: number[][][] = [];\r\n            for (var j = 0; j < i; j++) {\r\n              alreadyDrawnTemp[j] = fullSearchData[j]\r\n            }\r\n            setAlreadyDrawn(alreadyDrawnTemp);\r\n          }\r\n          var pos: number[][][] = [];\r\n          pos[i] = fullSearchData[i];\r\n          setPositions(pos);\r\n          i++;\r\n        }\r\n      }, 2000 / fullSearchData.length);\r\n    }\r\n  }, [pathFound]);\r\n\r\n  function reset() {\r\n    setPhase(-1);\r\n    setDropdownPicked(false);\r\n    setAlgoOrDatastruct(\"Nothing selected\");\r\n    setAlgoSelected(false);\r\n    setStartSelected(false);\r\n    setGoalSelected(false);\r\n    setStart([]);\r\n    setGoal([]);\r\n    setFullSearchData([]);\r\n    setPositions([]);\r\n    setPositionsPath([]);\r\n    setAlreadyDrawn([]);\r\n    setAlreadyDrawnPath([]);\r\n    setPath([]);\r\n    setPathFound(false);\r\n    setDrawn(false);\r\n    setColorOfRange(0);\r\n    setAlgoSelectedOption(\"Select nodes\");\r\n    setWalls([]);\r\n    setWeights([]);\r\n  }\r\n\r\n  function partialReset() {\r\n    setPhase(1);\r\n    setStartSelected(false);\r\n    setGoalSelected(false);\r\n    setStart([]);\r\n    setGoal([]);\r\n    setFullSearchData([]);\r\n    setPositions([]);\r\n    setPositionsPath([]);\r\n    setAlreadyDrawn([]);\r\n    setAlreadyDrawnPath([]);\r\n    setPath([]);\r\n    setPathFound(false);\r\n    setDrawn(false);\r\n    setColorOfRange(0);\r\n  }\r\n\r\n  //Main render\r\n  return (\r\n    <div className=\"body\">\r\n      <div className=\"walls\"></div>\r\n      <nav className=\"navbar\">\r\n          <a className='navbar-logo'>\r\n              DSA visuals <i className='fas fa-project-diagram'/>\r\n          </a>\r\n          <a className='navbar-selected'>\r\n              {algoOrDatastruct}\r\n          </a>\r\n          <div className='menu-icon' onClick={handleClick}>\r\n              <i className={click ? 'fas fa-times' : 'fas fa-bars'} />\r\n          </div>\r\n          <ul className={click ? 'nav-menu active' : 'nav-menu'}>\r\n              {algoSelected ?\r\n              <li className='nav-item'>\r\n                      <a className={drawingDone ? (algoSelectedOption !== \"Select nodes\" ? 'nav-links' : 'nav-li-unclickable') : \"nav-li-unclick-2\"} onClick={drawingDone ? function() {setClick(false); setAlgoSelectedOption(\"Select nodes\"); } : function() {}}>\r\n                          Select nodes\r\n                      </a>\r\n                      <a className={drawingDone ? (algoSelectedOption !== \"Add walls\" ? 'nav-links' : 'nav-li-unclickable') : \"nav-li-unclick-2\"} onClick={drawingDone ? function() {setClick(false); setAlgoSelectedOption(\"Add walls\"); } : function() {}}>\r\n                          Add walls\r\n                      </a>\r\n                      <a className={drawingDone ? (algoSelectedOption !== \"Add weights\" ? 'nav-links' : 'nav-li-unclickable') : \"nav-li-unclick-2\"} onClick={drawingDone ? function() {setClick(false); setAlgoSelectedOption(\"Add weights\"); } : function() {}}>\r\n                          Add weights\r\n                      </a>\r\n              </li>\r\n              : null}\r\n              <li className='nav-item' onMouseEnter={onMouseEnterDropdownAlgorithms} onMouseLeave={onMouseLeaveDropdownAlgorithms}>\r\n                  <a className='nav-links' onClick={() => setClick(false)}>\r\n                      Algorithms <i className='fas fa-caret-down' />\r\n                  </a>\r\n                  {dropdownAlgorithms && \r\n                  <ul className={clickAlgo ? 'dropdown-menu clicked' : 'dropdown-menu'}>\r\n                      <li>\r\n                          <a className=\"dropdown-link\" onClick={function() {setAlgoOrDatastruct(\"BFS algorithm selected\"); setDropdownPicked(true); setAlgoSelected(true); setAlgoSelectedOption(\"Select nodes\"); partialReset(); }}>\r\n                              Breadth-First Search\r\n                          </a>\r\n                      </li>\r\n                      <li>\r\n                          <a className=\"dropdown-link\" onClick={function() {setAlgoOrDatastruct(\"DFS algorithm selected\"); setDropdownPicked(true); setAlgoSelected(true); setAlgoSelectedOption(\"Select nodes\"); partialReset(); }}>\r\n                              Depth-First Search\r\n                          </a>\r\n                      </li>\r\n                      <li>\r\n                          <a className=\"dropdown-link\" onClick={function() {setAlgoOrDatastruct(\"GBFS algorithm selected\"); setDropdownPicked(true); setAlgoSelected(true); setAlgoSelectedOption(\"Select nodes\"); partialReset(); }}>\r\n                              Greedy Best-First Search\r\n                          </a>\r\n                      </li>\r\n                      <li>\r\n                          <a className=\"dropdown-link\" onClick={function() {setAlgoOrDatastruct(\"A* algorithm selected\"); setDropdownPicked(true); setAlgoSelected(true); setAlgoSelectedOption(\"Select nodes\"); partialReset(); }}>\r\n                              A* Search\r\n                          </a>\r\n                      </li>\r\n                  </ul>\r\n                  }\r\n              </li>\r\n              <li className='nav-item' onMouseEnter={onMouseEnterDropdownDatastructures} onMouseLeave={onMouseLeaveDropdownDatastructures}>\r\n                  <a className='nav-links' onClick={() => setClick(false)}>\r\n                      Data Structures <i className='fas fa-caret-down' />\r\n                  </a>\r\n                  {dropdownDatastructures && \r\n                  <ul className={clickDatastruct ? 'dropdown-menu clicked' : 'dropdown-menu'}>\r\n                      <li>\r\n                          <a className=\"dropdown-link\">\r\n                              Nothing implemented yet\r\n                          </a>\r\n                      </li>\r\n                  </ul>\r\n                  }\r\n              </li>\r\n              <li className='nav-item'>\r\n                  <a className='nav-links-mobile' onClick={() => setClick(false)}>\r\n                      Dropdowns here not yet implemented\r\n                  </a>\r\n              </li>\r\n          </ul>\r\n          <a>\r\n              <button className={drawingDone ? 'btn' : 'bt-done'} onClick={drawingDone ? function() {setClick(false); reset(); } : function() {}}>\r\n                  Reset\r\n              </button>\r\n           </a>\r\n      </nav>\r\n      {footer(dropdownPicked, startSelected, goalSelected, start, goal)}\r\n      {/*{todo()}*/}\r\n      {legend(dropdownPicked, startSelected, goalSelected, colorOfRange, goalColor, algoSelectedOption)}\r\n      {drawWalls(walls, true)}\r\n      {drawWeights(weights, true)}\r\n      {phase === 1 ? pickTargets(hoverBox, startSelected, colorOfRange, algoSelectedOption) : null}\r\n      {startSelected ? drawStartAndGoal(start, false, 0) : null}\r\n      {goalSelected ? drawStartAndGoal(goal, true, goalColor) : null}\r\n      {phase === 3 ? drawSearch(positions, true) : null}\r\n      {phase === 3 ? drawSearch(alreadyDrawn, false) : null}\r\n      {phase === 3 ? drawPath(positionsPath, true) : null}\r\n      {phase === 3 ? drawPath(alreadyDrawnPath, false) : null}   \r\n    </div>\r\n  );\r\n}\r\n\r\n//Boilerplate react render code\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}