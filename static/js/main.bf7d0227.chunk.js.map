{"version":3,"sources":["SearchAlgorithms/helperfunctions.tsx","SearchAlgorithms/BFS.tsx","SearchAlgorithms/DFS.tsx","SearchAlgorithms/GBFS.tsx","SearchAlgorithms/AStar.tsx","MergeAlgorithms/mergesort.tsx","MergeAlgorithms/quicksort.tsx","MergeAlgorithms/bubblesort.tsx","components/legend.tsx","components/footer.tsx","components/drawsearches.tsx","components/drawsorts.tsx","components/drawalgosearches.tsx","index.tsx"],"names":["alreadyDiscovered","discovered","nodeToCheck","i","length","toString","getFullDataSearch","fullSearchData","goal","pathTemp","pathFound","findNext","push","j","Number","MIN_SAFE_INTEGER","BFS","graph","currentNodes","targetNode","waitingNodes","found","walls","weights","view","directions","nextNodes","nextWaitingNodes","Math","round","depth","k","add","DFS","finishedWaiting","nextFinishedWaiting","chosenDirection","chosenWaiting","nothingLeft","breakme","l","nextFinishedwaitingOrNot","GBFS","h","bestDirection","MAX_SAFE_INTEGER","bestFinishedWaiting","abs","secondaryBestDirection","backtrackDirection","AStar","f","mergeSort","sortData","sortDataBuilder","finalBuiltData","n","finalBuiltDataTemp","p","sortDataTemp","intermediateSort","pop","sortDataBuilderTemp","toBuild","m","quickSort","dataBuilder","array","startIndex","endIndex","slice","pivotIndexAndArray","pivot","swapTemp","swapTempLast","partition","bubbleSort","indexTo","swap","legend","dropdownPicked","startSelected","goalSelected","colorOfRange","goalColor","algoSelectedOption","className","footer","start","pickTargets","hoverBox","style","position","height","width","marginTop","marginLeft","top","left","backgroundColor","borderRadius","display","zIndex","drawStartAndGoal","startOrGoal","isGoal","animation","drawSearch","positions","isFade","map","entry","elem","drawPath","drawWalls","drawWeights","drawSortData","data","sortFinished","bottom","drawAlgoSearchData","Styles","styled","div","props","color","opacity","App","useState","setDropdownPicked","dropdownPickedSearch","setDropdownPickedSearch","dropdownPickedSort","setDropdownPickedSort","setStartSelected","setGoalSelected","setHoverBox","setStart","setGoal","setFullSearchData","fullSortData","setFullSortData","setPositions","positionsPath","setPositionsPath","alreadyDrawn","setAlreadyDrawn","alreadyDrawnPath","setAlreadyDrawnPath","path","setPath","setPathFound","sortFound","setSortFound","setColorOfRange","setGoalColor","drawingDone","setDrawingDone","setWalls","setWeights","algoSelected","setAlgoSelected","setAlgoSearchSelected","setAlgoSortSelected","setAlgoSelectedOption","click","setClick","dropdownAlgorithms","setDropdownAlgorithms","dropdownDatastructures","setDropdownDatastructures","dropdownSearchAlgorithms","setDropdownSearchAlgorithms","algoOrDatastruct","setAlgoOrDatastruct","sliderValue","setSliderValue","setSortData","runSort","setRunSort","setSortFinished","setSearchFound","searchFinished","setSearchFinished","setFullSearchAlgoData","setRunSearch","searchData","setSearchData","onmousedown","onmouseup","onmousemove","e","clientY","floor","clientX","e2","remove","walls_temp","weights_temp","range","fullDataSearchTemp","maxWidth","max","document","documentElement","clientWidth","window","innerWidth","minHeight","maxHeight","clientHeight","innerHeight","reverse","partialReset","partialSearchReset","partialSortReset","useEffect","interval","setInterval","clearInterval","alreadyDrawnTempPath","posPath","alreadyDrawnTemp","pos","includes","builtSortData","x","y","random","builtSearchData","sortDataWithoutIndex","fullSortDataTemp","fullSortDataTempWithIndex","sortDataWithoutIndex2","fullSortDataTemp2","fullSortDataTemp3","onClick","onMouseEnter","onMouseLeave","type","min","value","onChange","target","onInput","sortComponents","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.bf7d0227.chunk.js","sourcesContent":["\r\n\r\n\r\nexport function alreadyDiscovered(discovered: number[][], nodeToCheck: number[]): boolean {\r\n    for (var i = 0; i < discovered.length; i++) {\r\n        if (discovered[i].toString() === nodeToCheck.toString()) return true;\r\n    }\r\n    return false;\r\n}\r\n\r\nexport function getFullDataSearch(fullSearchData: number[][][], goal: number[]) : number[][] {\r\n    var pathTemp: number[][] = [];\r\n    var pathFound: boolean = false;\r\n    var findNext = goal;\r\n    for (var i = fullSearchData.length - 1; i >= 0; i--) {\r\n        if (i === fullSearchData.length - 1) pathTemp.push(goal);\r\n        if (pathFound) break;\r\n        for (var j = 0; j < fullSearchData[i].length; j++) {\r\n          if (fullSearchData[i][j][0] === findNext[0] && fullSearchData[i][j][1] === findNext[1]) {\r\n            if (fullSearchData[i][j][2] === Number.MIN_SAFE_INTEGER) {\r\n              pathFound = true;\r\n              break;\r\n            }\r\n            pathTemp.push([fullSearchData[i][j][2], fullSearchData[i][j][3]])\r\n            findNext = [fullSearchData[i][j][2], fullSearchData[i][j][3]];\r\n            break;\r\n          }\r\n        }\r\n    }\r\n    return pathTemp;\r\n}","import {alreadyDiscovered} from './helperfunctions';\r\n\r\n//BFS building the lookup matrix\r\n//currentNodes stores both the current node and it's parent node (first 2 index = current, last 2 index = parent)\r\nexport function BFS(graph: number[][][], currentNodes: number[][], targetNode: number[], waitingNodes: number[][], // waiting node is nodes waiting to pass through weighted nodes on the form [nodeX, nodeY, direction, waitingCurrentCount, waitingTargetCount]\r\n            discovered: number[][], found: boolean, walls: number[][], weights: number[][], view: number[]): number[][][] {\r\n    if (found) return graph;\r\n    const directions: number[][] = [[1,0],[0,1],[-1,0],[0,-1]];\r\n    var nextNodes: number[][] = [];\r\n    var nextWaitingNodes: number[][] = [];\r\n    var i: number;\r\n    for (i = 0; i < waitingNodes.length; i++) {\r\n        if (waitingNodes[i][3] >= waitingNodes[i][4]) {\r\n            nextNodes.push([waitingNodes[i][0] + directions[waitingNodes[i][2]][0], waitingNodes[i][1] + directions[waitingNodes[i][2]][1], waitingNodes[i][0], waitingNodes[i][1]]);\r\n        } else {\r\n            nextWaitingNodes.push([waitingNodes[i][0], waitingNodes[i][1], waitingNodes[i][2], Math.round((waitingNodes[i][3] + 0.2) * 10) / 10, waitingNodes[i][4]]);\r\n        }\r\n    }\r\n    graph.push([[]]);\r\n    var depth = graph.length - 1;\r\n    for (i = 0; i < currentNodes.length; i++) {\r\n        if (alreadyDiscovered(discovered, [currentNodes[i][0], currentNodes[i][1]])) {\r\n            continue;\r\n        }\r\n        if (i === 0) graph[depth][0] = currentNodes[i];\r\n        else graph[depth].push(currentNodes[i]);\r\n        if ([currentNodes[i][0], currentNodes[i][1]].toString() !== [currentNodes[i][2], currentNodes[i][3]].toString()) {\r\n            discovered.push([currentNodes[i][0], currentNodes[i][1]]);\r\n        }\r\n        for (var j = 0; j < directions.length; j++) {\r\n            if ((alreadyDiscovered(discovered, [currentNodes[i][0] + directions[j][0], currentNodes[i][1] + directions[j][1]])) ||\r\n                ((currentNodes[i][0] + directions[j][0] <= view[0] || currentNodes[i][0] + directions[j][0] >= view[1]) || \r\n                (currentNodes[i][1] + directions[j][1] <= view[2] || currentNodes[i][1] + directions[j][1] >= view[3]))) { // out of bounds, think of it as walls\r\n                continue;\r\n            }\r\n            var add: boolean = true;\r\n            var k: number;\r\n            for (k = 0; k < walls.length; k++) {\r\n                if ([currentNodes[i][0] + directions[j][0], currentNodes[i][1] + directions[j][1]].toString() === walls[k].toString()) {\r\n                    add = false;\r\n                    break;\r\n                }\r\n            }\r\n            if (add) {\r\n                for (k = 0; k < weights.length; k++) {\r\n                    if ([currentNodes[i][0] + directions[j][0], currentNodes[i][1] + directions[j][1]].toString() === [weights[k][0], weights[k][1]].toString()) {\r\n                        nextWaitingNodes.push([currentNodes[i][0], currentNodes[i][1], j, 0.2, weights[k][2]]);\r\n                        add = false;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            if (add) {\r\n                nextNodes.push([currentNodes[i][0] + directions[j][0], currentNodes[i][1] + directions[j][1], currentNodes[i][0], currentNodes[i][1]]);\r\n            }\r\n        }\r\n        if (!found && (currentNodes[i][0] === targetNode[0] && currentNodes[i][1] === targetNode[1])) found = true;\r\n    }\r\n    if (nextNodes.toString() === [].toString()) {\r\n        return graph;\r\n    }\r\n    return BFS(graph, nextNodes, targetNode, nextWaitingNodes, discovered, found, walls, weights, view);\r\n}\r\n","import {alreadyDiscovered} from './helperfunctions';\r\n\r\nexport function DFS(graph: number[][][], currentNodes: number[][], targetNode: number[], waitingNodes: number[][],\r\n            discovered: number[][], found: boolean, walls: number[][], weights: number[][], view: number[], finishedWaiting: number[][]): number[][][] {\r\n    if (found) return graph;\r\n    const directions: number[][] = [[1,0],[0,1],[-1,0],[0,-1]];\r\n    var nextNodes: number[][] = [];\r\n    var nextWaitingNodes: number[][] = [];\r\n    var nextFinishedWaiting: number[][] = [];\r\n    var i: number;\r\n    for (i = 0; i < waitingNodes.length; i++) {\r\n        if (waitingNodes[i][3] >= waitingNodes[i][4]) {\r\n            finishedWaiting.push([waitingNodes[i][0] + directions[waitingNodes[i][2]][0], waitingNodes[i][1] + directions[waitingNodes[i][2]][1], waitingNodes[i][0], waitingNodes[i][1], graph.length - 1]);\r\n        } else {\r\n            nextWaitingNodes.push([waitingNodes[i][0], waitingNodes[i][1], waitingNodes[i][2], Math.round((waitingNodes[i][3] + 0.2) * 10) / 10, waitingNodes[i][4]]);\r\n        }\r\n    }\r\n    graph.push([[]]);\r\n    var depth = graph.length - 1;\r\n    for (i = 0; i < currentNodes.length; i++) {\r\n        if (alreadyDiscovered(discovered, [currentNodes[i][0], currentNodes[i][1]])) continue;\r\n        if (i === 0) graph[depth][0] = currentNodes[i];\r\n        else graph[depth].push(currentNodes[i]);\r\n        discovered.push([currentNodes[i][0], currentNodes[i][1]]);\r\n        var chosenDirection: number = -1;\r\n        var chosenWaiting: number = -1;\r\n        var j: number;\r\n        var k: number;\r\n        var add: boolean;\r\n        for (j = 0; j < directions.length + 1; j++) {\r\n            if (j === directions.length) { // check nextWaitingNodes\r\n                for (k = 0; k < finishedWaiting.length; k++) {\r\n                    chosenDirection = j;\r\n                    chosenWaiting = k;\r\n                    nextFinishedWaiting.push(finishedWaiting[k]);\r\n                }\r\n            } else {\r\n                if ((alreadyDiscovered(discovered, [currentNodes[i][0] + directions[j][0], currentNodes[i][1] + directions[j][1]])) ||\r\n                    ((currentNodes[i][0] + directions[j][0] <= view[0] || currentNodes[i][0] + directions[j][0] >= view[1]) || \r\n                    (currentNodes[i][1] + directions[j][1] <= view[2] || currentNodes[i][1] + directions[j][1] >= view[3]))) { // out of bounds, think of it as walls\r\n                    continue;\r\n                } else {\r\n                    add = true;\r\n                    for (k = 0; k < walls.length; k++) {\r\n                        if ([currentNodes[i][0] + directions[j][0], currentNodes[i][1] + directions[j][1]].toString() === walls[k].toString()) {\r\n                            add = false;\r\n                            break;\r\n                        }\r\n                    }\r\n                    if (add) {\r\n                        for (k = 0; k < weights.length; k++) {\r\n                            if ([currentNodes[i][0] + directions[j][0], currentNodes[i][1] + directions[j][1]].toString() === [weights[k][0], weights[k][1]].toString()) {\r\n                                nextWaitingNodes.push([currentNodes[i][0], currentNodes[i][1], j, 0.2, weights[k][2]]);\r\n                                add = false;\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                    if (!add) continue;\r\n                    chosenDirection = j;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        if (chosenDirection === -1) {\r\n            //depth is exhausted, try a different depth. Current just return this as a dead end\r\n            var nothingLeft: boolean = true;\r\n            for (j = graph.length - 1; j >= 0; j--) {\r\n                var breakme: boolean = false;\r\n                for (k = 0; k < directions.length; k++) {\r\n                    if ((alreadyDiscovered(discovered, [graph[j][0][0] + directions[k][0], graph[j][0][1] + directions[k][1]])) ||\r\n                        ((graph[j][0][0] + directions[k][0] <= view[0] || graph[j][0][0] + directions[k][0] >= view[1]) || \r\n                        (graph[j][0][1] + directions[k][1] <= view[2] || graph[j][0][1] + directions[k][1] >= view[3]))) { // out of bounds, think of it as walls\r\n                        continue;\r\n                    } else {\r\n                        add = true;\r\n                        var l: number;\r\n                        for (l = 0; l < walls.length; l++) {\r\n                            if ([graph[j][0][0] + directions[k][0], graph[j][0][1] + directions[k][1]].toString() === walls[l].toString()) {\r\n                                add = false;\r\n                                break;\r\n                            }\r\n                        }\r\n                        if (add) {\r\n                            for (l = 0; l < weights.length; l++) {\r\n                                if ([graph[j][0][0] + directions[k][0], graph[j][0][1] + directions[k][1]].toString() === [weights[l][0], weights[l][1]].toString()) {\r\n                                    nextWaitingNodes.push([graph[j][0][0], graph[j][0][1], k, 0.2, weights[l][2]]);\r\n                                    add = false;\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                        if (!add) continue;\r\n                        nextNodes.push([graph[j][0][0] + directions[k][0], graph[j][0][1] + directions[k][1], graph[j][0][0], graph[j][0][1]]);\r\n                        nothingLeft = false;\r\n                        breakme = true;\r\n                        break;\r\n                    }\r\n                }\r\n                if (breakme) break;\r\n            }\r\n            if (nothingLeft) return graph;\r\n        } else if (chosenDirection === 4) {\r\n            nextNodes.push([finishedWaiting[chosenWaiting][0], finishedWaiting[chosenWaiting][1], finishedWaiting[chosenWaiting][2], finishedWaiting[chosenWaiting][3]]);\r\n        } else {\r\n            nextNodes.push([currentNodes[i][0] + directions[chosenDirection][0], currentNodes[i][1] + directions[chosenDirection][1], currentNodes[i][0], currentNodes[i][1]]);\r\n        }\r\n        if (!found && (currentNodes[i][0] === targetNode[0] && currentNodes[i][1] === targetNode[1])) found = true;\r\n    }\r\n    var nextFinishedwaitingOrNot: boolean = true;\r\n    if (nextFinishedWaiting.toString() === [].toString()) nextFinishedwaitingOrNot = false;\r\n    return DFS(graph, nextNodes, targetNode, nextWaitingNodes, discovered, found, walls, weights, view, nextFinishedwaitingOrNot ? nextFinishedWaiting : finishedWaiting);\r\n}\r\n","import {alreadyDiscovered} from './helperfunctions';\r\n\r\nexport function GBFS(graph: number[][][], currentNodes: number[][], targetNode: number[], waitingNodes: number[][],\r\n            discovered: number[][], found: boolean, walls: number[][], weights: number[][], view: number[]): number[][][] {\r\n    if (found) return graph;\r\n    const directions: number[][] = [[1,0],[0,1],[-1,0],[0,-1]];\r\n    var nextNodes: number[][] = [];\r\n    var nextWaitingNodes: number[][] = [];\r\n    var finishedWaiting: number[][] = [];\r\n    var i: number;\r\n    for (i = 0; i < waitingNodes.length; i++) {\r\n        if (waitingNodes[i][3] >= waitingNodes[i][4]) {\r\n            finishedWaiting.push([waitingNodes[i][0] + directions[waitingNodes[i][2]][0], waitingNodes[i][1] + directions[waitingNodes[i][2]][1], waitingNodes[i][0], waitingNodes[i][1], graph.length - 1]);\r\n        } else {\r\n            nextWaitingNodes.push([waitingNodes[i][0], waitingNodes[i][1], waitingNodes[i][2], Math.round((waitingNodes[i][3] + 0.2) * 10) / 10, waitingNodes[i][4]]);\r\n        }\r\n    }\r\n    graph.push([[]]);\r\n    var depth = graph.length - 1;\r\n    for (i = 0; i < currentNodes.length; i++) {\r\n        if (alreadyDiscovered(discovered, [currentNodes[i][0], currentNodes[i][1]])) continue;\r\n        if (i === 0) graph[depth][0] = currentNodes[i];\r\n        else graph[depth].push(currentNodes[i]);\r\n        discovered.push([currentNodes[i][0], currentNodes[i][1]]);\r\n        var bestDirection: number[] = [Number.MAX_SAFE_INTEGER, -1];\r\n        var bestFinishedWaiting: number[] = [];\r\n        var j: number;\r\n        var k: number;\r\n        var h: number;\r\n        var add: boolean;\r\n        for (j = 0; j < finishedWaiting.length; j++) {\r\n            h = Math.abs(finishedWaiting[j][0] - targetNode[0]) + \r\n                            Math.abs(finishedWaiting[j][1] - targetNode[1]);\r\n            if (h <= bestDirection[0]) {\r\n                bestDirection = [h, j, 1];\r\n                bestFinishedWaiting = [finishedWaiting[j][0], finishedWaiting[j][1], finishedWaiting[j][2], finishedWaiting[j][3]];\r\n            };\r\n        }\r\n        for (j = 0; j < directions.length; j++) {\r\n            if ((alreadyDiscovered(discovered, [currentNodes[i][0] + directions[j][0], currentNodes[i][1] + directions[j][1]])) ||\r\n                ((currentNodes[i][0] + directions[j][0] <= view[0] || currentNodes[i][0] + directions[j][0] >= view[1]) || \r\n                (currentNodes[i][1] + directions[j][1] <= view[2] || currentNodes[i][1] + directions[j][1] >= view[3]))) { // out of bounds, think of it as walls\r\n                continue;\r\n            }\r\n            add = true;\r\n            for (k = 0; k < walls.length; k++) {\r\n                if ([currentNodes[i][0] + directions[j][0], currentNodes[i][1] + directions[j][1]].toString() === walls[k].toString()) {\r\n                    add = false;\r\n                    break;\r\n                }\r\n            }\r\n            if (add) {\r\n                for (k = 0; k < weights.length; k++) {\r\n                    if ([currentNodes[i][0] + directions[j][0], currentNodes[i][1] + directions[j][1]].toString() === [weights[k][0], weights[k][1]].toString()) {\r\n                        nextWaitingNodes.push([currentNodes[i][0], currentNodes[i][1], j, 0.2, weights[k][2]]);\r\n                        add = false;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            if (!add) continue;\r\n            h = Math.abs(currentNodes[i][0] + directions[j][0] - targetNode[0]) + \r\n                            Math.abs(currentNodes[i][1] + directions[j][1] - targetNode[1]);\r\n            if (h <= bestDirection[0]) bestDirection = [h, j, 0];\r\n        }\r\n        if (bestDirection[2] === 0) {\r\n            nextNodes.push([currentNodes[i][0] + directions[bestDirection[1]][0], currentNodes[i][1] + directions[bestDirection[1]][1], currentNodes[i][0], currentNodes[i][1]]);\r\n        } else if (bestDirection[2] === 1) {\r\n            nextNodes.push(bestFinishedWaiting);\r\n        } else {\r\n            var secondaryBestDirection: number[] = [Number.MAX_SAFE_INTEGER, -1];\r\n            var nothingLeft: boolean = true;\r\n            var backtrackDirection: number[] = [];\r\n            for (j = graph.length - 1; j >= 0; j--) {\r\n                for (k = 0; k < directions.length; k++) {\r\n                    if ((alreadyDiscovered(discovered, [graph[j][0][0] + directions[k][0], graph[j][0][1] + directions[k][1]])) ||\r\n                        ((graph[j][0][0] + directions[k][0] <= view[0] || graph[j][0][0] + directions[k][0] >= view[1]) || \r\n                        (graph[j][0][1] + directions[k][1] <= view[2] || graph[j][0][1] + directions[k][1] >= view[3]))) { // out of bounds, think of it as walls\r\n                        continue;\r\n                    } else {\r\n                        add = true;\r\n                        var l: number;\r\n                        for (l = 0; l < walls.length; l++) {\r\n                            if ([graph[j][0][0] + directions[k][0], graph[j][0][1] + directions[k][1]].toString() === walls[l].toString()) {\r\n                                add = false;\r\n                                break;\r\n                            }\r\n                        }\r\n                        if (add) {\r\n                            for (l = 0; l < weights.length; l++) {\r\n                                if ([graph[j][0][0] + directions[k][0], graph[j][0][1] + directions[k][1]].toString() === [weights[l][0], weights[l][1]].toString()) {\r\n                                    nextWaitingNodes.push([graph[j][0][0], graph[j][0][1], k, 0.2, weights[l][2]]);\r\n                                    add = false;\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                        if (!add) continue;\r\n                        h = Math.abs(graph[j][0][0] + directions[k][0] - targetNode[0]) + \r\n                                        Math.abs(graph[j][0][1] + directions[k][1] - targetNode[1]);\r\n                        if (h <= secondaryBestDirection[0]) {\r\n                            secondaryBestDirection = [h, k];\r\n                            backtrackDirection = [graph[j][0][0], graph[j][0][1]];\r\n                        }\r\n                        nothingLeft = false;\r\n                    }\r\n                }\r\n            }\r\n            if (nothingLeft) {\r\n                return graph;\r\n            } else {\r\n                nextNodes.push([backtrackDirection[0] + directions[secondaryBestDirection[1]][0], backtrackDirection[1] + directions[secondaryBestDirection[1]][1], backtrackDirection[0], backtrackDirection[1]]);\r\n            }\r\n        }\r\n        if (!found && (currentNodes[i][0] === targetNode[0] && currentNodes[i][1] === targetNode[1])) found = true;\r\n    }\r\n    return GBFS(graph, nextNodes, targetNode, nextWaitingNodes, discovered, found, walls, weights, view);\r\n}\r\n","import {alreadyDiscovered} from './helperfunctions';\r\n\r\nexport function AStar(graph: number[][][], currentNodes: number[][], targetNode: number[], waitingNodes: number[][],\r\n            discovered: number[][], found: boolean, walls: number[][], weights: number[][], view: number[]): number[][][] {\r\n    if (found) return graph;\r\n    const directions: number[][] = [[1,0],[0,1],[-1,0],[0,-1]];\r\n    var nextNodes: number[][] = [];\r\n    var nextWaitingNodes: number[][] = [];\r\n    var finishedWaiting: number[][] = [];\r\n    var i: number;\r\n    for (i = 0; i < waitingNodes.length; i++) {\r\n        if (waitingNodes[i][3] >= waitingNodes[i][4]) {\r\n            finishedWaiting.push([waitingNodes[i][0] + directions[waitingNodes[i][2]][0], waitingNodes[i][1] + directions[waitingNodes[i][2]][1], waitingNodes[i][0], waitingNodes[i][1], graph.length - 1]);\r\n        } else {\r\n            nextWaitingNodes.push([waitingNodes[i][0], waitingNodes[i][1], waitingNodes[i][2], Math.round((waitingNodes[i][3] + 0.2) * 10) / 10, waitingNodes[i][4]]);\r\n        }\r\n    }\r\n    graph.push([[]]);\r\n    var depth = graph.length - 1;\r\n    for (i = 0; i < currentNodes.length; i++) {\r\n        if (alreadyDiscovered(discovered, [currentNodes[i][0], currentNodes[i][1]])) continue;\r\n        if (i === 0) graph[depth][0] = currentNodes[i];\r\n        else graph[depth].push(currentNodes[i]);\r\n        discovered.push([currentNodes[i][0], currentNodes[i][1]]);\r\n        var bestDirection: number[] = [Number.MAX_SAFE_INTEGER, -1, -1];\r\n        var bestFinishedWaiting: number[] = [];    \r\n        var j: number;\r\n        var k: number;\r\n        var g: number;\r\n        var h: number;\r\n        var f: number;\r\n        var add: boolean;\r\n        for (j = 0; j < finishedWaiting.length; j++) {\r\n            g = finishedWaiting[j][4];\r\n            h = Math.abs(finishedWaiting[j][0] - targetNode[0]) + \r\n                            Math.abs(finishedWaiting[j][1] - targetNode[1]);\r\n            f = g + h;\r\n            if (f <= bestDirection[0]) {\r\n                bestDirection = [f, j, 1];\r\n                bestFinishedWaiting = [finishedWaiting[j][0], finishedWaiting[j][1], finishedWaiting[j][2], finishedWaiting[j][3]];\r\n            };\r\n        }\r\n        for (j = 0; j < directions.length; j++) { // I could extend the \"directions\" with finishedwaiting, such saying for j in directions.length + 1 , and if we reach the last here, we do something only if finished waiting is a possibility\r\n            if ((alreadyDiscovered(discovered, [currentNodes[i][0] + directions[j][0], currentNodes[i][1] + directions[j][1]])) ||\r\n                ((currentNodes[i][0] + directions[j][0] <= view[0] || currentNodes[i][0] + directions[j][0] >= view[1]) || \r\n                (currentNodes[i][1] + directions[j][1] <= view[2] || currentNodes[i][1] + directions[j][1] >= view[3]))) { // out of bounds, think of it as walls\r\n                continue;\r\n            }\r\n            add = true;\r\n            for (k = 0; k < walls.length; k++) {\r\n                if ([currentNodes[i][0] + directions[j][0], currentNodes[i][1] + directions[j][1]].toString() === walls[k].toString()) {\r\n                    add = false;\r\n                    break;\r\n                }\r\n            }\r\n            if (add) {\r\n                for (k = 0; k < weights.length; k++) {\r\n                    if ([currentNodes[i][0] + directions[j][0], currentNodes[i][1] + directions[j][1]].toString() === [weights[k][0], weights[k][1]].toString()) {\r\n                        nextWaitingNodes.push([currentNodes[i][0], currentNodes[i][1], j, 0.2, weights[k][2]]);\r\n                        add = false;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            if (!add) continue;\r\n            g = depth + 1;\r\n            h = Math.abs(currentNodes[i][0] + directions[j][0] - targetNode[0]) + \r\n                            Math.abs(currentNodes[i][1] + directions[j][1] - targetNode[1]);\r\n            f = g + h;\r\n            if (f <= bestDirection[0]) bestDirection = [f, j, 0];\r\n        }\r\n        if (bestDirection[2] === 0) {\r\n            nextNodes.push([currentNodes[i][0] + directions[bestDirection[1]][0], currentNodes[i][1] + directions[bestDirection[1]][1], currentNodes[i][0], currentNodes[i][1]]);\r\n        } else if (bestDirection[2] === 1) {\r\n            nextNodes.push(bestFinishedWaiting);\r\n        } else {\r\n            var secondaryBestDirection: number[] = [Number.MAX_SAFE_INTEGER, -1];\r\n            var nothingLeft: boolean = true;\r\n            var backtrackDirection: number[] = [];\r\n            for (j = graph.length - 1; j >= 0; j--) {\r\n                for (k = 0; k < directions.length; k++) {\r\n                    if ((alreadyDiscovered(discovered, [graph[j][0][0] + directions[k][0], graph[j][0][1] + directions[k][1]])) ||\r\n                        ((graph[j][0][0] + directions[k][0] <= view[0] || graph[j][0][0] + directions[k][0] >= view[1]) || \r\n                        (graph[j][0][1] + directions[k][1] <= view[2] || graph[j][0][1] + directions[k][1] >= view[3]))) { // out of bounds, think of it as walls\r\n                        continue;\r\n                    } else {\r\n                        add = true;\r\n                        var l: number;\r\n                        for (l = 0; l < walls.length; l++) {\r\n                            if ([graph[j][0][0] + directions[k][0], graph[j][0][1] + directions[k][1]].toString() === walls[l].toString()) {\r\n                                add = false;\r\n                                break;\r\n                            }\r\n                        }\r\n                        if (add) {\r\n                            for (l = 0; l < weights.length; l++) {\r\n                                if ([graph[j][0][0] + directions[k][0], graph[j][0][1] + directions[k][1]].toString() === [weights[l][0], weights[l][1]].toString()) {\r\n                                    nextWaitingNodes.push([graph[j][0][0], graph[j][0][1], k, 0.2, weights[l][2]]);\r\n                                    add = false;\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                        if (!add) continue;\r\n                        g = depth + 1;\r\n                        h = Math.abs(graph[j][0][0] + directions[k][0] - targetNode[0]) + \r\n                                        Math.abs(graph[j][0][1] + directions[k][1] - targetNode[1]);\r\n                        f = g + h;\r\n                        if (f <= secondaryBestDirection[0]) {\r\n                            secondaryBestDirection = [f, k];\r\n                            backtrackDirection = [graph[j][0][0], graph[j][0][1]];\r\n                        }\r\n                        nothingLeft = false;\r\n                    }\r\n                }\r\n            }\r\n            if (nothingLeft) {\r\n                return graph;\r\n            } else {\r\n                nextNodes.push([backtrackDirection[0] + directions[secondaryBestDirection[1]][0], backtrackDirection[1] + directions[secondaryBestDirection[1]][1], backtrackDirection[0], backtrackDirection[1]]);\r\n            }\r\n        }\r\n        if (!found && (currentNodes[i][0] === targetNode[0] && currentNodes[i][1] === targetNode[1])) found = true;\r\n    }\r\n    return AStar(graph, nextNodes, targetNode, nextWaitingNodes, discovered, found, walls, weights, view);\r\n}\r\n","\r\nexport function mergeSort(sortData: number[][], sortDataBuilder: number[][]): number[][][] {\r\n    if (sortData.length === 1) {\r\n        var finalBuiltData: number[][][] = [];\r\n        for (var n = 0; n < sortDataBuilder.length; n++) {\r\n            var finalBuiltDataTemp: number[][] = [];\r\n            for (var p = 0; p < sortDataBuilder[n].length; p++) {\r\n                finalBuiltDataTemp.push([p, sortDataBuilder[n][p]]);\r\n            }\r\n            finalBuiltData.push(finalBuiltDataTemp);\r\n        }\r\n        return finalBuiltData;\r\n    }\r\n    var sortDataTemp: number[][] = [];\r\n    for (var i = 0; i < sortData.length; i+=2) {\r\n        if (i === sortData.length - 1) {\r\n            sortDataTemp.push(sortData[i]);\r\n        } else {\r\n            var j: number = 0;\r\n            var k: number = 0;\r\n            var intermediateSort: number[] = [];\r\n            while (j <= sortData[i].length && k <= sortData[i+1].length) {\r\n                if (j === sortData[i].length) {\r\n                    intermediateSort.push(sortData[i+1][k]);\r\n                    k++;\r\n                } else if (k === sortData[i+1].length) {\r\n                    intermediateSort.push(sortData[i][j]);\r\n                    j++;\r\n                } else if (sortData[i][j] > sortData[i+1][k]) {\r\n                    intermediateSort.push(sortData[i+1][k]);\r\n                    k++;\r\n                } else {\r\n                    intermediateSort.push(sortData[i][j]);\r\n                    j++;\r\n                }\r\n            }\r\n            intermediateSort.pop();\r\n            sortDataTemp.push(intermediateSort);\r\n        }\r\n    }\r\n    var sortDataBuilderTemp: number[][] = sortDataBuilder;\r\n    var toBuild: number[] = [];\r\n    for (var l = 0; l < sortDataTemp.length; l++) {\r\n        for (var m = 0; m < sortDataTemp[l].length; m++) {\r\n            toBuild.push(sortDataTemp[l][m]);\r\n        }\r\n    }\r\n    sortDataBuilderTemp.push(toBuild);\r\n    return mergeSort(sortDataTemp, sortDataBuilderTemp);\r\n}\r\n\r\n","\r\nfunction partition(array: number[], startIndex: number, endIndex: number) : [number, number[]] {\r\n    var pivot: number = array[endIndex];\r\n    for (var i = startIndex; i < endIndex; i++) {\r\n        if (array[i] <= pivot) {\r\n            var swapTemp = array[i];\r\n            array[i] = array[startIndex];\r\n            array[startIndex] = swapTemp;\r\n            startIndex++;\r\n        }\r\n    }\r\n    var swapTempLast = array[endIndex];\r\n    array[endIndex] = array[startIndex];\r\n    array[startIndex] = swapTempLast;\r\n    return [startIndex, array];\r\n}\r\n\r\nexport function quickSort(dataBuilder: number[][], array: number[], startIndex: number, endIndex: number) : number[][] {\r\n    if (startIndex >= endIndex) return dataBuilder;\r\n    dataBuilder.push(array.slice());\r\n    var pivotIndexAndArray: [number, number[]] = partition(array, startIndex, endIndex);\r\n    quickSort(dataBuilder, pivotIndexAndArray[1], startIndex, pivotIndexAndArray[0] - 1);\r\n    quickSort(dataBuilder, pivotIndexAndArray[1], pivotIndexAndArray[0] + 1, endIndex);\r\n    return dataBuilder;\r\n}\r\n","\r\nexport function bubbleSort(sortData: number[], sortDataBuilder: number[][], indexTo: number): number[][][] {\r\n    sortDataBuilder.push(sortData.slice());\r\n    if (indexTo === 0) {\r\n        var finalBuiltData: number[][][] = [];\r\n        for (var n = 0; n < sortDataBuilder.length; n++) {\r\n            var finalBuiltDataTemp: number[][] = [];\r\n            for (var p = 0; p < sortDataBuilder[n].length; p++) {\r\n                finalBuiltDataTemp.push([p, sortDataBuilder[n][p]]);\r\n            }\r\n            finalBuiltData.push(finalBuiltDataTemp);\r\n        }\r\n        return finalBuiltData;\r\n    }\r\n    for (var i = 0; i < indexTo; i++) {\r\n        if (sortData[i] > sortData[i+1]) {\r\n            var swap = sortData[i];\r\n            sortData[i] = sortData[i+1];\r\n            sortData[i+1] = swap;\r\n        }\r\n    }\r\n    return bubbleSort(sortData, sortDataBuilder, indexTo - 1);\r\n}\r\n\r\n","\r\nexport function legend(dropdownPicked: boolean, startSelected: boolean, goalSelected: boolean, colorOfRange: number, goalColor: number, algoSelectedOption: string, walls: number[][], weights: number[][]) {\r\n  return (\r\n    <div className=\"legend-container\">\r\n      <div className=\"legend-title\">\r\n        Legend\r\n      </div>\r\n      {dropdownPicked && algoSelectedOption === \"Add walls\" &&\r\n      <div className=\"legend-info\">\r\n        <div className=\"legend-colorm1\"><i className='fas fa-square'/></div>\r\n          &nbsp;Add walls\r\n      </div>}\r\n      {walls.toString() !== [].toString() &&\r\n      <div className=\"legend-info\">\r\n        <div className=\"legend-colorm2\"><i className='fas fa-square'/></div>\r\n          &nbsp;Wall nodes\r\n      </div>}\r\n      {dropdownPicked && algoSelectedOption === \"Add weights\" &&\r\n      <div className=\"legend-info\">\r\n        <div className=\"legend-color0\"><i className='fas fa-square'/></div>\r\n          &nbsp;Add weights\r\n      </div>}\r\n      {weights.toString() !== [].toString() && \r\n      <div className=\"legend-info\">\r\n        <div className=\"legend-colorm3\"><i className='fas fa-square'/></div>\r\n          &nbsp;Weight nodes\r\n      </div>}\r\n      {dropdownPicked && algoSelectedOption === \"Select nodes\" && !startSelected &&\r\n      <div className=\"legend-info\">\r\n        <div className=\"legend-color1\"><i className='fas fa-square'/></div>\r\n          &nbsp;Select start node\r\n      </div>}\r\n      {startSelected &&\r\n      <div className=\"legend-info\">\r\n        <div className=\"legend-color1\"><i className='fas fa-square'/></div>\r\n          &nbsp;Start node\r\n      </div>}\r\n      {startSelected && algoSelectedOption === \"Select nodes\" && !goalSelected &&\r\n      (colorOfRange === 0 ?\r\n      <div className=\"legend-info\">\r\n        <div className=\"legend-color2\"><i className='fas fa-square'/></div>\r\n          &nbsp;Select goal node (green light)\r\n      </div> \r\n      : (colorOfRange === 1 ? \r\n      <div className=\"legend-info\">\r\n        <div className=\"legend-color3\"><i className='fas fa-square'/></div>\r\n          &nbsp;Select goal node (computationally hard)\r\n      </div> \r\n      : \r\n      <div className=\"legend-info\">\r\n        <div className=\"legend-color4\"><i className='fas fa-square'/></div>\r\n          &nbsp;Select goal node (restricted)\r\n      </div>))}\r\n      {goalSelected &&\r\n      <div className=\"legend-info\">\r\n        <div className={goalColor === 0 ? \"legend-color2\" : (goalColor === 1 ? \"legend-color3\" : \"legend-color4\")}><i className='fas fa-square'/></div>\r\n          &nbsp;Goal node\r\n      </div>}\r\n      {goalSelected &&\r\n      <div className=\"legend-info\">\r\n        <div className=\"legend-color5\"><i className='fas fa-square'/></div>\r\n          &nbsp;Search\r\n      </div>}\r\n      {goalSelected && \r\n      <div className=\"legend-info\">\r\n        <div className=\"legend-color6\"><i className='fas fa-square'/></div>\r\n          &nbsp;Path found\r\n      </div>}\r\n    </div>\r\n  )\r\n}\r\n","\r\nexport function footer(dropdownPicked: boolean, startSelected: boolean, goalSelected: boolean, start: number[], goal: number[]) {\r\n  return (\r\n    <footer className=\"footer-container\">\r\n      {!dropdownPicked &&\r\n      <div className=\"footer-info\">\r\n        Select an algorithm or datastructure\r\n      </div>}\r\n      {!startSelected && dropdownPicked &&\r\n      <div className=\"footer-info\">\r\n        Select your start node\r\n      </div>}\r\n      {startSelected && !goalSelected &&\r\n      <div className=\"footer-info\">\r\n        Select your goal node\r\n      </div>}\r\n      {startSelected && goalSelected &&\r\n      <div className=\"footer-inf-nowiggle\">\r\n        Enjoy the show!\r\n      </div>}\r\n    </footer>\r\n  )\r\n}\r\n","\r\nexport function pickTargets(hoverBox: number[], startSelected: boolean, colorOfRange: number, algoSelectedOption: string) {\r\n  return (\r\n    <div\r\n      style={{\r\n        position: \"absolute\",\r\n        height: \"15px\",\r\n        width: \"15px\",\r\n        marginTop: `${hoverBox[0]}px`,\r\n        marginLeft: `${hoverBox[1]}px`,\r\n        top: \"3px\",\r\n        left: \"3px\",\r\n        backgroundColor: algoSelectedOption === \"Select nodes\" ? (startSelected ? (colorOfRange === 0 ? \"rgb(49, 158, 63, 0.5)\" : ( colorOfRange === 1 ? \"rgb(211, 221, 63, 0.5)\" : \"rgb(221, 63, 63, 0.5)\" ) ) : \"rgb(65,126,238, 0.5)\") : (algoSelectedOption === \"Add walls\" ? \"rgb(146, 95, 0, 0.5)\" : \"rgb(68, 0, 179, 0.5)\"),\r\n        borderRadius: \"35%\",\r\n        display: \"inline-block\",\r\n        zIndex: -1,\r\n      }}\r\n    />\r\n  )\r\n}\r\n  \r\nexport function drawStartAndGoal(startOrGoal: number[], isGoal: boolean, colorOfRange: number) {\r\n  return (\r\n        <div style={{\r\n          position: \"absolute\",\r\n          height: \"15px\",\r\n          width: \"15px\",\r\n          marginLeft: `${startOrGoal[0] * 20}px`,\r\n          marginTop: `${startOrGoal[1] * 20}px`,\r\n          top: \"3px\",\r\n          left: \"3px\",\r\n          backgroundColor: isGoal ? (colorOfRange === 0 ? \"rgb(49, 158, 63)\" : ( colorOfRange === 1 ? \"rgb(211, 221, 63)\" : \"rgb(221, 63, 63)\" ) ) : \"rgb(65,126,238)\",\r\n          borderRadius: \"35%\",\r\n          display: \"inline-block\",\r\n          animation: \"fadeMe .2s\",\r\n          zIndex: -0.9,\r\n        }}/>\r\n  );\r\n}\r\n  \r\nexport function drawSearch(positions: number[][][], isFade: boolean) {\r\n  return (\r\n    positions.map(entry => (\r\n      entry.map(elem => (\r\n        <div style={{\r\n          position: \"absolute\",\r\n          height: \"15px\",\r\n          width: \"15px\",\r\n          marginLeft: `${elem[0] * 20}px`,\r\n          marginTop: `${elem[1] * 20}px`,\r\n          top: \"3px\",\r\n          left: \"3px\",\r\n          backgroundColor: \"rgb(90, 90, 90)\",\r\n          borderRadius: \"35%\",\r\n          display: \"inline-block\",\r\n          animation: isFade ? \"fadeMe .2s\" : \"\",\r\n          zIndex: -1,\r\n        }}/>\r\n      ))\r\n    ))\r\n  );\r\n}\r\n  \r\nexport function drawPath(positions: number[][], isFade: boolean) {\r\n  return (\r\n    positions.map(entry => (\r\n      <div style={{\r\n        position: \"absolute\",\r\n        height: \"7.5px\",\r\n        width: \"7.5px\",\r\n        marginLeft: `${entry[0] * 20}px`,\r\n        marginTop: `${entry[1] * 20}px`,\r\n        top: \"6.85px\",\r\n        left: \"6.85px\",\r\n        backgroundColor: \"rgb(240,149,55)\",\r\n        borderRadius: \"35%\",\r\n        display: \"inline-block\",\r\n        animation: isFade ? \"fadeMe .2s\" : \"\",\r\n        zIndex: -0.8,\r\n      }}/>\r\n    ))\r\n  );\r\n}\r\n  \r\nexport function drawWalls(walls: number[][], isFade: boolean) {\r\n  return (\r\n    walls.map(entry => (\r\n      <div style={{\r\n        position: \"absolute\",\r\n        height: \"20px\",\r\n        width: \"20px\",\r\n        marginLeft: `${entry[0] * 20}px`,\r\n        marginTop: `${entry[1] * 20}px`,\r\n        top: \"0px\",\r\n        left: \"0px\",\r\n        backgroundColor: \"rgb(146, 95, 0)\",\r\n        display: \"inline-block\",\r\n        animation: isFade ? \"fadeMe 1s\" : \"\",\r\n        zIndex: -0.8,\r\n      }}/>\r\n    ))\r\n  );\r\n}\r\n\r\nexport function drawWeights(weights: number[][], isFade: boolean) {\r\n  return (\r\n    weights.map(entry => (\r\n      <div style={{\r\n        position: \"absolute\",\r\n        height: \"20px\",\r\n        width: \"20px\",\r\n        marginLeft: `${entry[0] * 20}px`,\r\n        marginTop: `${entry[1] * 20}px`,\r\n        top: \"0px\",\r\n        left: \"0px\",\r\n        backgroundColor: `rgb(68, 0, 179, ${entry[2]})`,\r\n        display: \"inline-block\",\r\n        animation: isFade ? \"fadeMe 1s\" : \"\",\r\n        zIndex: -0.8,\r\n      }}/>\r\n    ))\r\n  );\r\n}\r\n\r\n","\r\n\r\n\r\nexport function drawSortData(data: number[][], sortFinished: boolean) {\r\n    return (\r\n      data.map(entry => (\r\n        <div style={{\r\n          position: \"absolute\",\r\n          height: `${entry[1] * 20}px`,\r\n          width: \"15px\",\r\n          marginLeft: `${entry[0] * 20 + 2.5}px`,\r\n          bottom: \"0px\",\r\n          left: \"0px\",\r\n          borderRadius: \"5px\",\r\n          backgroundColor: sortFinished ? \"rgb(125,194,175,0.7)\" : \"rgb(65,126,238,0.7)\",\r\n          display: \"inline-block\",\r\n          zIndex: -2,\r\n        }}/>\r\n      ))\r\n    );\r\n}","\r\n\r\n\r\nexport function drawAlgoSearchData(data: number[][], sortFinished: boolean) {\r\n    return (\r\n      data.map(entry => (\r\n        <div style={{\r\n          position: \"absolute\",\r\n          height: `${entry[1] * 20}px`,\r\n          width: \"15px\",\r\n          marginLeft: `${entry[0] * 20 + 2.5}px`,\r\n          bottom: \"0px\",\r\n          left: \"0px\",\r\n          borderRadius: \"5px\",\r\n          backgroundColor: sortFinished ? \"rgb(125,194,175,0.7)\" : \"rgb(65,126,238,0.7)\",\r\n          display: \"inline-block\",\r\n          zIndex: -2,\r\n        }}/>\r\n      ))\r\n    );\r\n}","import React, { useEffect, useState } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport 'font-awesome/css/font-awesome.min.css';\r\nimport styled from 'styled-components';\r\n\r\nimport {BFS} from './SearchAlgorithms/BFS';\r\nimport {DFS} from './SearchAlgorithms/DFS';\r\nimport {GBFS} from './SearchAlgorithms/GBFS';\r\nimport {AStar} from './SearchAlgorithms/AStar';\r\nimport {mergeSort} from './MergeAlgorithms/mergesort';\r\nimport {quickSort} from './MergeAlgorithms/quicksort';\r\nimport {bubbleSort} from './MergeAlgorithms/bubblesort';\r\nimport {getFullDataSearch} from './SearchAlgorithms/helperfunctions';\r\nimport {legend} from './components/legend';\r\nimport {footer} from './components/footer';\r\nimport {pickTargets, drawStartAndGoal, drawSearch, drawPath, drawWalls, drawWeights} from './components/drawsearches';\r\nimport {drawSortData} from './components/drawsorts';\r\nimport {drawAlgoSearchData} from './components/drawalgosearches';\r\n\r\ninterface props {\r\n  opacity: number;\r\n  color: string;\r\n}\r\n\r\nconst Styles = styled.div<props>`\r\n  display: flex;\r\n  position: fixed;\r\n  align-items: center;\r\n  color: rgb(125,194,175);\r\n  margin-top: 50px;\r\n  right: 30px;\r\n\r\n  .value {\r\n    flex: 1;\r\n    margin-right: 15px;\r\n    font-size: 30px;\r\n  }\r\n  \r\n  .slider {\r\n    flex: 100;\r\n    -webkit-appearance: none;\r\n    height: 10px;\r\n    width: 300px;\r\n    border-radius: 5px;\r\n    background: rgb(226,125,95,0.8);\r\n    outline: none;\r\n\r\n    &::-webkit-slider-thumb {\r\n      -webkit-appearance: none;\r\n      appearance: none;\r\n      width: 20px;\r\n      height: 20px;\r\n      border-radius: 5px;\r\n      background: ${(props) => props.color};\r\n      opacity: ${(props) => props.opacity};\r\n      cursor: pointer;\r\n      outline: 3px solid rgb(65,126,238);\r\n    }\r\n  }\r\n`;\r\n\r\nfunction App() {\r\n  const [dropdownPicked, setDropdownPicked] = useState(false);\r\n  const [dropdownPickedSearch, setDropdownPickedSearch] = useState(false);\r\n  const [dropdownPickedSort, setDropdownPickedSort] = useState(false);\r\n  const [dropdownPickedDatastructures, setDropdownPickedDatastructures] = useState(false);\r\n  const [startSelected, setStartSelected] = useState(false);\r\n  const [goalSelected, setGoalSelected] = useState(false);\r\n  const [hoverBox, setHoverBox] = useState<number[]>([]);\r\n  const [start, setStart] = useState<number []>([]);\r\n  const [goal, setGoal] = useState<number []>([]);\r\n  const [fullSearchData, setFullSearchData] = useState<number[][][]>([]);\r\n  const [fullSortData, setFullSortData] = useState<number[][][]>([]);\r\n  const [positions, setPositions] = useState<number[][][]>([]);\r\n  const [positionsPath, setPositionsPath] = useState<number[][]>([]);\r\n  const [alreadyDrawn, setAlreadyDrawn] = useState<number[][][]>([]);\r\n  const [alreadyDrawnPath, setAlreadyDrawnPath] = useState<number[][]>([]);\r\n  const [path, setPath] = useState<number[][]>([]);\r\n  const [pathFound, setPathFound] = useState(false);\r\n  const [sortFound, setSortFound] = useState(false);\r\n  const [colorOfRange, setColorOfRange] = useState(0);\r\n  const [goalColor, setGoalColor] = useState(0);\r\n  const [drawingDone, setDrawingDone] = useState(true);\r\n  const [walls, setWalls] = useState<number[][]>([]);\r\n  const [weights, setWeights] = useState<number[][]>([]);\r\n  const [algoSelected, setAlgoSelected] = useState(false);\r\n  const [algoSearchSelected, setAlgoSearchSelected] = useState(false);\r\n  const [algoSortSelected, setAlgoSortSelected] = useState(false);\r\n  const [datastructureSelected, setDatastructureSelected] = useState(false);\r\n  const [algoSelectedOption, setAlgoSelectedOption] = useState(\"Select nodes\");\r\n  const [click, setClick] = useState(false);\r\n  const [dropdownAlgorithms, setDropdownAlgorithms] = useState(false);\r\n  const [dropdownDatastructures, setDropdownDatastructures] = useState(false);\r\n  const [dropdownSearchAlgorithms, setDropdownSearchAlgorithms] = useState(false);\r\n  const [algoOrDatastruct, setAlgoOrDatastruct] = useState<string>(\"Nothing selected\");\r\n  const [sliderValue, setSliderValue] = useState<number>(50);\r\n  const [sortData, setSortData] = useState<number[][]>([]);\r\n  const [runSort, setRunSort] = useState(\"\");\r\n  const [sortFinished, setSortFinished] = useState(false);\r\n  const [searchFound, setSearchFound] = useState(false);\r\n  const [searchFinished, setSearchFinished] = useState(false);\r\n  const [fullSearchAlgoData, setFullSearchAlgoData] = useState<number[][][]>([]);\r\n  const [runSearch, setRunSearch] = useState(\"\");\r\n  const [searchData, setSearchData] = useState<number[][]>([]);\r\n\r\n  const onMouseEnterDropdownAlgorithms = () => {\r\n      if (window.innerWidth < 960) {\r\n          setDropdownAlgorithms(false);\r\n      } else {\r\n          setDropdownAlgorithms(true);\r\n      }\r\n  };\r\n  const onMouseLeaveDropdownAlgorithms = () => {\r\n      if (window.innerWidth < 960) {\r\n          setDropdownAlgorithms(false);\r\n      } else {\r\n          setDropdownAlgorithms(false);\r\n      }\r\n  };\r\n  const onMouseEnterDropdownDatastructures = () => {\r\n      if (window.innerWidth < 960) {\r\n          setDropdownDatastructures(false);\r\n      } else {\r\n          setDropdownDatastructures(true);\r\n      }\r\n  };\r\n  const onMouseLeaveDropdownDatastructures = () => {\r\n      if (window.innerWidth < 960) {\r\n          setDropdownDatastructures(false);\r\n      } else {\r\n          setDropdownDatastructures(false);\r\n      }\r\n  };\r\n  const onMouseEnterDropdownSearchAlgorithms = () => {\r\n    if (window.innerWidth < 960) {\r\n        setDropdownSearchAlgorithms(false);\r\n    } else {\r\n        setDropdownSearchAlgorithms(true);\r\n    }\r\n  };\r\n  const onMouseLeaveDropdownSearchAlgorithms = () => {\r\n    if (window.innerWidth < 960) {\r\n        setDropdownSearchAlgorithms(false);\r\n    } else {\r\n        setDropdownSearchAlgorithms(false);\r\n    }\r\n  };\r\n\r\n  if (dropdownPickedSort) {\r\n    \r\n  }\r\n\r\n  if (algoSelectedOption === \"Add walls\") {\r\n    onmousedown = function() {return;}\r\n    onmouseup = function() {return;}\r\n    onmousemove = function() {return;}\r\n    onmousemove = function(e) {\r\n      if (e.clientY >= 80) {\r\n        setHoverBox([Math.floor(e.clientY / 20) * 20, Math.floor(e.clientX / 20) * 20])\r\n        onmousedown = function(e2) {\r\n          if (e2.clientY >= 80) {\r\n            var add: boolean = true;\r\n            var remove: boolean = false;\r\n            var walls_temp: number[][] = [];\r\n            var i: number;\r\n            for (i = 0; i < walls.length; i++) {\r\n              if (walls[i].toString() === [Math.floor(e.clientX / 20), Math.floor(e.clientY / 20)].toString()) {\r\n                add = false;\r\n                remove = true;\r\n                continue;\r\n              }\r\n              walls_temp.push(walls[i]);\r\n            }\r\n            if (add) {\r\n              var weights_temp: number[][] = [];\r\n              for (i = 0; i < weights.length; i++) {\r\n                if ([weights[i][0], weights[i][1]].toString() !== [Math.floor(e.clientX / 20), Math.floor(e.clientY / 20)].toString()) {\r\n                  weights_temp.push(weights[i]);\r\n                }\r\n              }\r\n              setWeights(weights_temp);\r\n            }\r\n            if (add) {\r\n              walls_temp.push([Math.floor(e.clientX / 20), Math.floor(e.clientY / 20)]);\r\n              setWalls(walls_temp);\r\n            }\r\n            if (remove) {\r\n              setWalls(walls_temp);\r\n            }\r\n          }\r\n        }\r\n      };\r\n    }\r\n  }\r\n\r\n  if (algoSelectedOption === \"Add weights\") {\r\n    onmousedown = function() {return;}\r\n    onmouseup = function() {return;}\r\n    onmousemove = function() {return;}\r\n    onmousemove = function(e) {\r\n      if (e.clientY >= 80) {\r\n        setHoverBox([Math.floor(e.clientY / 20) * 20, Math.floor(e.clientX / 20) * 20])\r\n        onmousedown = function(e2) {\r\n          if (e2.clientY >= 80) {\r\n            var add: boolean = true;\r\n            var weights_temp = weights;\r\n            var i: number;\r\n            for (i = 0; i < weights_temp.length; i++) {\r\n              if ([weights[i][0], weights[i][1]].toString() === [Math.floor(e.clientX / 20), Math.floor(e.clientY / 20)].toString()) {\r\n                add = false;\r\n                weights_temp[i][2] = weights_temp[i][2] === 1 ? 0.2 : Math.round((weights_temp[i][2] + 0.2) * 10) / 10;\r\n                break;\r\n              }\r\n            }\r\n            if (add) {\r\n              for (i = 0; i < walls.length; i++) {\r\n                if (walls[i].toString() === [Math.floor(e.clientX / 20), Math.floor(e.clientY / 20)].toString()) {\r\n                  add = false;\r\n                  break;\r\n                }\r\n              }\r\n            }\r\n            if (add) {\r\n              weights_temp.push([Math.floor(e.clientX / 20), Math.floor(e.clientY / 20), 0.2]);\r\n              setWeights(weights_temp);\r\n            }\r\n          }\r\n        }\r\n      };\r\n    }\r\n  }\r\n\r\n  if (dropdownPicked && algoSelectedOption === \"Select nodes\") {\r\n    if (!startSelected || !goalSelected) {\r\n      onmousedown = function() {return;}\r\n      onmouseup = function() {return;}\r\n      onmousemove = function() {return;}\r\n      onmouseup = function(e) {\r\n        if (algoSelectedOption !== \"Select nodes\") return;\r\n        if (!startSelected && start.length === 0) {\r\n          if (e.clientY >= 80) {\r\n            setStart([Math.floor(e.clientX / 20), Math.floor(e.clientY / 20)])\r\n            setStartSelected(true);\r\n          }\r\n        }\r\n        else if (!goalSelected && goal.length === 0) {\r\n          if (e.clientY >= 80) {\r\n            if (colorOfRange !== 2) {\r\n              var goalColorTemp = colorOfRange;\r\n              setGoalColor(goalColorTemp);\r\n              setGoal([Math.floor(e.clientX / 20), Math.floor(e.clientY / 20)])\r\n              setGoalSelected(true);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  if (!goalSelected && dropdownPicked && algoSelectedOption === \"Select nodes\") {\r\n    onmousemove = function(e) {\r\n      var range: number = Math.abs(Math.floor(e.clientX / 20) - start[0]) + \r\n                          Math.abs(Math.floor(e.clientY / 20) - start[1]);\r\n      if (e.clientY >= 80) {\r\n        if (algoOrDatastruct === \"BFS algorithm selected\") {\r\n          if (range < 20) setColorOfRange(0);\r\n          if (range >= 20 && range < 40) setColorOfRange(1);\r\n          if (range >= 40) setColorOfRange(2);\r\n        } else if (algoOrDatastruct === \"DFS algorithm selected\") {\r\n          setColorOfRange(0);\r\n        } else if (algoOrDatastruct === \"GBFS algorithm selected\") {\r\n          setColorOfRange(0);\r\n        } else if (algoOrDatastruct === \"A* algorithm selected\") {\r\n          setColorOfRange(0);\r\n        }\r\n        setHoverBox([Math.floor(e.clientY / 20) * 20, Math.floor(e.clientX / 20) * 20]);\r\n      };\r\n    }\r\n  }\r\n  \r\n  if (goalSelected && !pathFound) {\r\n    onmousedown = function(e) {return;}\r\n    onmouseup = function(e) {return;}\r\n    onmousemove = function(e) {return;}\r\n    if (fullSearchData.length === 0 || path.length === 0) {\r\n      const minWidth: number = -1;\r\n      const maxWidth: number = Math.floor((Math.max(document.documentElement.clientWidth || 0, window.innerWidth || 0) - 19.99) / 20) + 1;\r\n      const minHeight: number = Math.floor(80 / 20) - 1;\r\n      const maxHeight: number = Math.floor((Math.max(document.documentElement.clientHeight || 0, window.innerHeight || 0) - 19.99) / 20) + 1;\r\n      var fullDataSearchTemp: number[][][];\r\n      var pathTemp: number[][];\r\n      if (algoOrDatastruct === \"BFS algorithm selected\") {\r\n        fullDataSearchTemp = BFS([], [[start[0], start[1], Number.MIN_SAFE_INTEGER, Number.MIN_SAFE_INTEGER]], goal, [], [], false, walls, weights, [minWidth, maxWidth, minHeight, maxHeight]);\r\n        setFullSearchData(fullDataSearchTemp);\r\n        pathTemp = getFullDataSearch(fullDataSearchTemp, goal);\r\n        pathTemp = pathTemp.reverse();\r\n        setPath(pathTemp);\r\n        setPathFound(true);\r\n      } else if (algoOrDatastruct === \"DFS algorithm selected\") {\r\n        fullDataSearchTemp = DFS([], [[start[0], start[1], Number.MIN_SAFE_INTEGER, Number.MIN_SAFE_INTEGER]], goal, [], [], false, walls, weights, [minWidth, maxWidth, minHeight, maxHeight], []);\r\n        setFullSearchData(fullDataSearchTemp);\r\n        pathTemp = getFullDataSearch(fullDataSearchTemp, goal);\r\n        pathTemp = pathTemp.reverse();\r\n        setPath(pathTemp);\r\n        setPathFound(true);\r\n      } else if (algoOrDatastruct === \"GBFS algorithm selected\") {\r\n        fullDataSearchTemp = GBFS([], [[start[0], start[1], Number.MIN_SAFE_INTEGER, Number.MIN_SAFE_INTEGER]], goal, [], [], false, walls, weights, [minWidth, maxWidth, minHeight, maxHeight]);\r\n        setFullSearchData(fullDataSearchTemp);\r\n        pathTemp = getFullDataSearch(fullDataSearchTemp, goal);\r\n        pathTemp = pathTemp.reverse();\r\n        setPath(pathTemp);\r\n        setPathFound(true);\r\n      } else if (algoOrDatastruct === \"A* algorithm selected\") {\r\n        fullDataSearchTemp = AStar([], [[start[0], start[1], Number.MIN_SAFE_INTEGER, Number.MIN_SAFE_INTEGER]], goal, [], [], false, walls, weights, [minWidth, maxWidth, minHeight, maxHeight]);\r\n        setFullSearchData(fullDataSearchTemp);\r\n        pathTemp = getFullDataSearch(fullDataSearchTemp, goal);\r\n        pathTemp = pathTemp.reverse();\r\n        setPath(pathTemp);\r\n        setPathFound(true);\r\n      }\r\n    }\r\n  }\r\n  \r\n  useEffect(() => {\r\n    var i = 0;\r\n    var k = 0;\r\n    if (pathFound) {\r\n      setDrawingDone(false);\r\n      const interval = setInterval(() => {\r\n        if (i === fullSearchData.length) {\r\n          if (k === path.length) {\r\n            setDrawingDone(true);\r\n            clearInterval(interval);\r\n            return;\r\n          } else {\r\n            if (k > 0) {\r\n              var alreadyDrawnTempPath: number[][] = [];\r\n              for (var l = 0; l < k; l++) {\r\n                alreadyDrawnTempPath[l] = path[l]\r\n              }\r\n              setAlreadyDrawnPath(alreadyDrawnTempPath);\r\n            }\r\n            var posPath: number[][] = [];\r\n            posPath[k] = path[k];\r\n            setPositionsPath(posPath);\r\n            k++;\r\n          }\r\n        } else {\r\n          if (i > 0) {\r\n            var alreadyDrawnTemp: number[][][] = [];\r\n            for (var j = 0; j < i; j++) {\r\n              alreadyDrawnTemp[j] = fullSearchData[j]\r\n            }\r\n            setAlreadyDrawn(alreadyDrawnTemp);\r\n          }\r\n          var pos: number[][][] = [];\r\n          pos[i] = fullSearchData[i];\r\n          setPositions(pos);\r\n          i++;\r\n        }\r\n      }, 2000 / fullSearchData.length);\r\n    }\r\n  }, [pathFound, fullSearchData, path]);\r\n\r\n  function sortComponents(dropdownPickedSort: boolean) {\r\n    return (\r\n      <>\r\n        <div className=\"slider-text\" style={{zIndex: -1}}>Amount of entries</div>\r\n        <Styles opacity={0.8} color={`rgb(${sliderValue*1.5},${201-sliderValue*1.5},0)`}>\r\n          <div className=\"value\" style={{zIndex: -1}}>{sliderValue}</div>\r\n          <input type=\"range\" min={2} max={(Math.floor((Math.max(document.documentElement.clientWidth || 0, window.innerWidth || 0) - 19.99) / 20) + 1) * 1 * 10 / 10} value={sliderValue} className=\"slider\" onChange={(e: any) => setSliderValue(e.target.value)} onInput={() => partialSortReset()} />\r\n        </Styles>\r\n        <button className={'btn-sort'} onClick={() => setRunSort(algoOrDatastruct)}>\r\n          {dropdownPickedSort ? \"Run sort\" : \"Run search\"}\r\n        </button>\r\n      </>\r\n    );\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (sortFound) {\r\n      var i: number = 0;\r\n      const interval = setInterval(() => {\r\n        if (i >= fullSortData.length) {\r\n          setSortFinished(true);\r\n          clearInterval(interval);\r\n          return;\r\n        }\r\n        setSortData(fullSortData[i]);\r\n        i++;\r\n      }, 5000 / fullSortData.length);\r\n    }\r\n  }, [sortFound]);\r\n\r\n  useEffect(() => {\r\n    if (algoOrDatastruct.includes(\"sort\")) {\r\n      var h: number = Math.floor((Math.max(document.documentElement.clientHeight || 0, window.innerHeight || 0) - 19.99) / 20) - 3;\r\n      var builtSortData: number[][] = [];\r\n      for (var x = 0; x < sliderValue; x++) {\r\n        var y: number = Math.floor(Math.random() * (h - 1 + 1) + 1);\r\n        builtSortData.push([x, y]);\r\n      }\r\n      setSortData(builtSortData);\r\n    }\r\n    if (algoOrDatastruct.includes(\"search\")) {\r\n      var builtSearchData: number[][] = [];\r\n      for (var x = 0; x < sliderValue; x++) {\r\n        var y: number = Math.floor(Math.random() * (sliderValue - 1 + 1) + 1);\r\n        builtSearchData.push([x, y]);\r\n      }\r\n      setSearchData(builtSearchData);\r\n    }\r\n  }, [sliderValue]);\r\n\r\n  // Sort algorithm also happens here\r\n  useEffect(() => {\r\n    var sortDataWithoutIndex: number[] = [];\r\n    if (runSort === \"Quick sort selected\") {\r\n      for (var i = 0; i < sortData.length; i++) {\r\n        sortDataWithoutIndex.push(sortData[i][1]);\r\n      }\r\n      var fullSortDataTemp: number[][] = quickSort([], sortDataWithoutIndex, 0, sortDataWithoutIndex.length - 1);\r\n      var fullSortDataTempWithIndex: number[][][] = [];\r\n      for (var n = 0; n < fullSortDataTemp.length; n++) {\r\n          var finalBuiltDataTemp: number[][] = [];\r\n          for (var p = 0; p < fullSortDataTemp[n].length; p++) {\r\n              finalBuiltDataTemp.push([p, fullSortDataTemp[n][p]]);\r\n          }\r\n          fullSortDataTempWithIndex.push(finalBuiltDataTemp);\r\n      }\r\n      setFullSortData(fullSortDataTempWithIndex);\r\n      setSortFound(true);\r\n    }\r\n\r\n    var sortDataWithoutIndex2: number[][] = [];\r\n\r\n    if (runSort === \"Merge sort selected\") {\r\n      for (var i = 0; i < sortData.length; i++) {\r\n        sortDataWithoutIndex2.push([sortData[i][1]]);\r\n      }\r\n      var fullSortDataTemp2: number[][][] = mergeSort(sortDataWithoutIndex2, []);\r\n      setFullSortData(fullSortDataTemp2);\r\n      setSortFound(true);\r\n    }\r\n\r\n    if (runSort === \"Bubble sort selected\") {\r\n      for (var i = 0; i < sortData.length; i++) {\r\n        sortDataWithoutIndex.push(sortData[i][1]);\r\n      }\r\n      var fullSortDataTemp3: number[][][] = bubbleSort(sortDataWithoutIndex, [], sortDataWithoutIndex.length - 1);\r\n      setFullSortData(fullSortDataTemp3);\r\n      setSortFound(true);\r\n    }\r\n  }, [runSort]);\r\n\r\n  \r\n\r\n  function reset() {\r\n    setDropdownPicked(false);\r\n    setDropdownPickedSort(false);\r\n    setDropdownPickedSearch(false);\r\n    setAlgoOrDatastruct(\"Nothing selected\");\r\n    setAlgoSelected(false);\r\n    setStartSelected(false);\r\n    setGoalSelected(false);\r\n    setStart([]);\r\n    setGoal([]);\r\n    setFullSearchData([]);\r\n    setPositions([]);\r\n    setPositionsPath([]);\r\n    setAlreadyDrawn([]);\r\n    setAlreadyDrawnPath([]);\r\n    setPath([]);\r\n    setPathFound(false);\r\n    setColorOfRange(0);\r\n    setAlgoSelectedOption(\"Select nodes\");\r\n    setWalls([]);\r\n    setWeights([]);\r\n  }\r\n\r\n  function partialReset() {\r\n    setStartSelected(false);\r\n    setGoalSelected(false);\r\n    setStart([]);\r\n    setGoal([]);\r\n    setFullSearchData([]);\r\n    setPositions([]);\r\n    setPositionsPath([]);\r\n    setAlreadyDrawn([]);\r\n    setAlreadyDrawnPath([]);\r\n    setPath([]);\r\n    setPathFound(false);\r\n    setColorOfRange(0);\r\n  }\r\n\r\n  function partialSearchReset() {\r\n    setSearchFound(false);\r\n    setFullSearchAlgoData([]);\r\n    setSearchFinished(false);\r\n    setRunSearch(\"\");\r\n  }\r\n\r\n  function partialSortReset() {\r\n    setSortFound(false);\r\n    setFullSortData([]);\r\n    setSortFinished(false);\r\n    setRunSort(\"\");\r\n  }\r\n\r\n  // Refactoring navbar into a separate component is more difficult, as it has a bunch of setstates\r\n  return (\r\n    <div className=\"body\">\r\n      <nav className=\"navbar\">\r\n          <div className='navbar-logo'>\r\n              DSA visuals <i className='fas fa-project-diagram'/>\r\n          </div>\r\n          <div className='navbar-selected'>\r\n              {algoOrDatastruct}\r\n          </div>\r\n          <div className='menu-icon' onClick={() => setClick(!click)}>\r\n              <i className={click ? 'fas fa-times' : 'fas fa-bars'} />\r\n          </div>\r\n          <ul className={click ? 'nav-menu active' : 'nav-menu'}>\r\n              {algoSelected &&\r\n              <li className='nav-item'>\r\n                      <div className={drawingDone ? (algoSelectedOption !== \"Select nodes\" ? 'nav-links' : 'nav-li-unclickable') : \"nav-li-unclick-2\"} onClick={drawingDone ? function() {setClick(false); setAlgoSelectedOption(\"Select nodes\"); } : function() {}}>\r\n                          Select nodes\r\n                      </div>\r\n                      <div className={drawingDone ? (algoSelectedOption !== \"Add walls\" ? 'nav-links' : 'nav-li-unclickable') : \"nav-li-unclick-2\"} onClick={drawingDone ? function() {setClick(false); setAlgoSelectedOption(\"Add walls\"); } : function() {}}>\r\n                          Add walls\r\n                      </div>\r\n                      <div className={drawingDone ? (algoSelectedOption !== \"Add weights\" ? 'nav-links' : 'nav-li-unclickable') : \"nav-li-unclick-2\"} onClick={drawingDone ? function() {setClick(false); setAlgoSelectedOption(\"Add weights\"); } : function() {}}>\r\n                          Add weights\r\n                      </div>\r\n              </li>}\r\n              <li className='nav-item' onMouseEnter={onMouseEnterDropdownAlgorithms} onMouseLeave={onMouseLeaveDropdownAlgorithms}>\r\n                  <div className='nav-links' onClick={() => setClick(false)}>\r\n                      Pathfinder Algorithms <i className='fas fa-caret-down' />\r\n                  </div>\r\n                  {dropdownAlgorithms && \r\n                  <ul className='dropdown-menu'>\r\n                      <li>\r\n                          <div className=\"dropdown-link\" onClick={function() {setAlgoOrDatastruct(\"BFS algorithm selected\"); setDropdownPickedSort(false); setDropdownPickedSearch(false); setDropdownPicked(true); setAlgoSelected(true); setAlgoSelectedOption(\"Select nodes\"); partialReset(); }}>\r\n                              Breadth-First Search\r\n                          </div>\r\n                      </li>\r\n                      <li>\r\n                          <div className=\"dropdown-link\" onClick={function() {setAlgoOrDatastruct(\"DFS algorithm selected\"); setDropdownPickedSort(false); setDropdownPickedSearch(false); setDropdownPicked(true); setAlgoSelected(true); setAlgoSelectedOption(\"Select nodes\"); partialReset(); }}>\r\n                              Depth-First Search\r\n                          </div>\r\n                      </li>\r\n                      <li>\r\n                          <div className=\"dropdown-link\" onClick={function() {setAlgoOrDatastruct(\"GBFS algorithm selected\"); setDropdownPickedSort(false); setDropdownPickedSearch(false); setDropdownPicked(true); setAlgoSelected(true); setAlgoSelectedOption(\"Select nodes\"); partialReset(); }}>\r\n                              Greedy Best-First Search\r\n                          </div>\r\n                      </li>\r\n                      <li>\r\n                          <div className=\"dropdown-link\" onClick={function() {setAlgoOrDatastruct(\"A* algorithm selected\"); setDropdownPickedSort(false); setDropdownPickedSearch(false); setDropdownPicked(true); setAlgoSelected(true); setAlgoSelectedOption(\"Select nodes\"); partialReset(); }}>\r\n                              A* Search\r\n                          </div>\r\n                      </li>\r\n                  </ul>\r\n                  }\r\n              </li>\r\n              <li className='nav-item' onMouseEnter={onMouseEnterDropdownSearchAlgorithms} onMouseLeave={onMouseLeaveDropdownSearchAlgorithms}>\r\n                  <div className='nav-links' onClick={() => setClick(false)}>\r\n                      Search &amp; Sort Algorithms <i className='fas fa-caret-down' />\r\n                  </div>\r\n                  {dropdownSearchAlgorithms && \r\n                  <ul className='dropdown-menu'>\r\n                      <li>\r\n                          <div className=\"dropdown-link\" onClick={function() {partialSearchReset(); setAlgoOrDatastruct(\"Linear search selected\"); setDropdownPickedSort(false); setDropdownPicked(false); setDropdownPickedSearch(true); setAlgoSearchSelected(true); }}>\r\n                              Linear search\r\n                          </div>\r\n                      </li>\r\n                      <li>\r\n                          <div className=\"dropdown-link\" onClick={function() {partialSearchReset(); setAlgoOrDatastruct(\"Binary search selected\"); setDropdownPickedSort(false); setDropdownPicked(false); setDropdownPickedSearch(true); setAlgoSearchSelected(true); }}>\r\n                              Binary search\r\n                          </div>\r\n                      </li>\r\n                      <li>\r\n                          <div className=\"dropdown-link\" onClick={function() {partialSearchReset(); setAlgoOrDatastruct(\"Jump search selected\"); setDropdownPickedSort(false); setDropdownPicked(false); setDropdownPickedSearch(true); setAlgoSearchSelected(true); }}>\r\n                              Jump search\r\n                          </div>\r\n                      </li>\r\n                      <div className=\"divider\"/>\r\n                      <li>\r\n                          <div className=\"dropdown-link\" onClick={function() {partialSortReset(); setAlgoOrDatastruct(\"Quick sort selected\"); setDropdownPicked(false); setDropdownPickedSearch(false); setDropdownPickedSort(true); setAlgoSortSelected(true); }}>\r\n                              Quick sort\r\n                          </div>\r\n                      </li>\r\n                      <li>\r\n                          <div className=\"dropdown-link\" onClick={function() {partialSortReset(); setAlgoOrDatastruct(\"Merge sort selected\"); setDropdownPicked(false); setDropdownPickedSearch(false); setDropdownPickedSort(true); setAlgoSortSelected(true);}}>\r\n                              Merge sort\r\n                          </div>\r\n                      </li>\r\n                      <li>\r\n                          <div className=\"dropdown-link\" onClick={function() {partialSortReset();setAlgoOrDatastruct(\"Bubble sort selected\"); setDropdownPicked(false); setDropdownPickedSearch(false); setDropdownPickedSort(true); setAlgoSortSelected(true);}}>\r\n                              Bubble sort\r\n                          </div>\r\n                      </li>\r\n                  </ul>\r\n                  }\r\n              </li>\r\n              <li className='nav-item' onMouseEnter={onMouseEnterDropdownDatastructures} onMouseLeave={onMouseLeaveDropdownDatastructures}>\r\n                  <div className='nav-links' onClick={() => setClick(false)}>\r\n                      Data Structures <i className='fas fa-caret-down' />\r\n                  </div>\r\n                  {dropdownDatastructures && \r\n                  <ul className='dropdown-menu'>\r\n                      <li>\r\n                          <div className=\"dropdown-link\">\r\n                              Nothing implemented yet\r\n                          </div>\r\n                      </li>\r\n                  </ul>\r\n                  }\r\n              </li>\r\n              <li className='nav-item'>\r\n                  <div className='nav-links-mobile' onClick={() => setClick(false)}>\r\n                      Dropdowns and buttons not yet implemented\r\n                  </div>\r\n              </li>\r\n          </ul>\r\n          <div>\r\n              <button className={drawingDone ? 'btn' : 'bt-done'} onClick={drawingDone ? function() {setClick(false); reset(); } : function() {}}>\r\n                  Reset\r\n              </button>\r\n          </div>\r\n      </nav>\r\n      {footer(dropdownPicked, startSelected, goalSelected, start, goal)}\r\n      {legend(dropdownPicked, startSelected, goalSelected, colorOfRange, goalColor, algoSelectedOption, walls, weights)}\r\n      {drawWalls(walls, true)}\r\n      {drawWeights(weights, true)}\r\n      {(dropdownPickedSort || dropdownPickedSearch) && sortComponents(dropdownPickedSort)}\r\n      {dropdownPickedSort && drawSortData(sortData, sortFinished)}\r\n      {dropdownPickedSearch && drawAlgoSearchData(searchData, searchFinished)}\r\n      {!goalSelected && dropdownPicked && pickTargets(hoverBox, startSelected, colorOfRange, algoSelectedOption)}\r\n      {startSelected && drawStartAndGoal(start, false, 0)}\r\n      {goalSelected && drawStartAndGoal(goal, true, goalColor)}\r\n      {pathFound && drawSearch(positions, true)}\r\n      {pathFound && drawSearch(alreadyDrawn, false)}\r\n      {pathFound && drawPath(positionsPath, true)}\r\n      {pathFound && drawPath(alreadyDrawnPath, false)}\r\n    </div>\r\n  );\r\n}\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}